(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 09.06.2009 22:24:39         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit BusinessClasses;

{$DEFINE BusinessClasses_unitheader}
{$INCLUDE BusinessClasses_Interface.inc}

{ Includefile for methodimplementations }

{$INCLUDE BusinessClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ Tispoljz_obychn_skidkinapryamuyu_ocenivaet }

function Tispoljz_obychn_skidkinapryamuyu_ocenivaet._Get_M_napryamuyu_ocenivaet: TBoldObjectReference;
begin
  assert(ValidateMember('Tispoljz_obychn_skidkinapryamuyu_ocenivaet', 'napryamuyu_ocenivaet', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function Tispoljz_obychn_skidkinapryamuyu_ocenivaet._Getnapryamuyu_ocenivaet: TProgivanie;
begin
  assert(not assigned(M_napryamuyu_ocenivaet.BoldObject) or (M_napryamuyu_ocenivaet.BoldObject is TProgivanie), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'napryamuyu_ocenivaet', M_napryamuyu_ocenivaet.BoldObject.ClassName, 'TProgivanie']));
  Result := TProgivanie(M_napryamuyu_ocenivaet.BoldObject);
end;

function Tispoljz_obychn_skidkinapryamuyu_ocenivaet._Get_M_ispoljz_obychn_skidki: TBoldObjectReference;
begin
  assert(ValidateMember('Tispoljz_obychn_skidkinapryamuyu_ocenivaet', 'ispoljz_obychn_skidki', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function Tispoljz_obychn_skidkinapryamuyu_ocenivaet._Getispoljz_obychn_skidki: TSkidki;
begin
  assert(not assigned(M_ispoljz_obychn_skidki.BoldObject) or (M_ispoljz_obychn_skidki.BoldObject is TSkidki), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ispoljz_obychn_skidki', M_ispoljz_obychn_skidki.BoldObject.ClassName, 'TSkidki']));
  Result := TSkidki(M_ispoljz_obychn_skidki.BoldObject);
end;

procedure Tispoljz_obychn_skidkinapryamuyu_ocenivaetList.Add(NewObject: Tispoljz_obychn_skidkinapryamuyu_ocenivaet);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function Tispoljz_obychn_skidkinapryamuyu_ocenivaetList.IndexOf(anObject: Tispoljz_obychn_skidkinapryamuyu_ocenivaet): Integer;
begin
  result := IndexOfElement(anObject);
end;

function Tispoljz_obychn_skidkinapryamuyu_ocenivaetList.Includes(anObject: Tispoljz_obychn_skidkinapryamuyu_ocenivaet) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function Tispoljz_obychn_skidkinapryamuyu_ocenivaetList.AddNew: Tispoljz_obychn_skidkinapryamuyu_ocenivaet;
begin
  result := Tispoljz_obychn_skidkinapryamuyu_ocenivaet(InternalAddNew);
end;

procedure Tispoljz_obychn_skidkinapryamuyu_ocenivaetList.Insert(index: Integer; NewObject: Tispoljz_obychn_skidkinapryamuyu_ocenivaet);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function Tispoljz_obychn_skidkinapryamuyu_ocenivaetList.GetBoldObject(index: Integer): Tispoljz_obychn_skidkinapryamuyu_ocenivaet;
begin
  result := Tispoljz_obychn_skidkinapryamuyu_ocenivaet(GetElement(index));
end;

procedure Tispoljz_obychn_skidkinapryamuyu_ocenivaetList.SetBoldObject(index: Integer; NewObject: Tispoljz_obychn_skidkinapryamuyu_ocenivaet);
begin;
  SetElement(index, NewObject);
end;

{ TLinkPredost_diskont_vPredost_diskont }

function TLinkPredost_diskont_vPredost_diskont._Get_M_Predost_diskont: TBoldObjectReference;
begin
  assert(ValidateMember('TLinkPredost_diskont_vPredost_diskont', 'Predost_diskont', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TLinkPredost_diskont_vPredost_diskont._GetPredost_diskont: TDiscont_politika;
begin
  assert(not assigned(M_Predost_diskont.BoldObject) or (M_Predost_diskont.BoldObject is TDiscont_politika), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Predost_diskont', M_Predost_diskont.BoldObject.ClassName, 'TDiscont_politika']));
  Result := TDiscont_politika(M_Predost_diskont.BoldObject);
end;

function TLinkPredost_diskont_vPredost_diskont._Get_M_Predost_diskont_v: TBoldObjectReference;
begin
  assert(ValidateMember('TLinkPredost_diskont_vPredost_diskont', 'Predost_diskont_v', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TLinkPredost_diskont_vPredost_diskont._GetPredost_diskont_v: TList_klienta;
begin
  assert(not assigned(M_Predost_diskont_v.BoldObject) or (M_Predost_diskont_v.BoldObject is TList_klienta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Predost_diskont_v', M_Predost_diskont_v.BoldObject.ClassName, 'TList_klienta']));
  Result := TList_klienta(M_Predost_diskont_v.BoldObject);
end;

procedure TLinkPredost_diskont_vPredost_diskontList.Add(NewObject: TLinkPredost_diskont_vPredost_diskont);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TLinkPredost_diskont_vPredost_diskontList.IndexOf(anObject: TLinkPredost_diskont_vPredost_diskont): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TLinkPredost_diskont_vPredost_diskontList.Includes(anObject: TLinkPredost_diskont_vPredost_diskont) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TLinkPredost_diskont_vPredost_diskontList.AddNew: TLinkPredost_diskont_vPredost_diskont;
begin
  result := TLinkPredost_diskont_vPredost_diskont(InternalAddNew);
end;

procedure TLinkPredost_diskont_vPredost_diskontList.Insert(index: Integer; NewObject: TLinkPredost_diskont_vPredost_diskont);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TLinkPredost_diskont_vPredost_diskontList.GetBoldObject(index: Integer): TLinkPredost_diskont_vPredost_diskont;
begin
  result := TLinkPredost_diskont_vPredost_diskont(GetElement(index));
end;

procedure TLinkPredost_diskont_vPredost_diskontList.SetBoldObject(index: Integer; NewObject: TLinkPredost_diskont_vPredost_diskont);
begin;
  SetElement(index, NewObject);
end;

{ TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel }

function TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel._Get_M_Skidka_kak_prog_otd_chel: TBoldObjectReference;
begin
  assert(ValidateMember('TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel', 'Skidka_kak_prog_otd_chel', 0, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[0]);
end;

function TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel._GetSkidka_kak_prog_otd_chel: TProgivanie;
begin
  assert(not assigned(M_Skidka_kak_prog_otd_chel.BoldObject) or (M_Skidka_kak_prog_otd_chel.BoldObject is TProgivanie), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Skidka_kak_prog_otd_chel', M_Skidka_kak_prog_otd_chel.BoldObject.ClassName, 'TProgivanie']));
  Result := TProgivanie(M_Skidka_kak_prog_otd_chel.BoldObject);
end;

function TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel._Get_M_Otd_chel_imeet_skidki: TBoldObjectReference;
begin
  assert(ValidateMember('TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel', 'Otd_chel_imeet_skidki', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel._GetOtd_chel_imeet_skidki: TDiscont_politika;
begin
  assert(not assigned(M_Otd_chel_imeet_skidki.BoldObject) or (M_Otd_chel_imeet_skidki.BoldObject is TDiscont_politika), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Otd_chel_imeet_skidki', M_Otd_chel_imeet_skidki.BoldObject.ClassName, 'TDiscont_politika']));
  Result := TDiscont_politika(M_Otd_chel_imeet_skidki.BoldObject);
end;

procedure TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList.Add(NewObject: TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList.IndexOf(anObject: TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList.Includes(anObject: TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList.AddNew: TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel;
begin
  result := TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel(InternalAddNew);
end;

procedure TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList.Insert(index: Integer; NewObject: TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList.GetBoldObject(index: Integer): TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel;
begin
  result := TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel(GetElement(index));
end;

procedure TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList.SetBoldObject(index: Integer; NewObject: TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel);
begin;
  SetElement(index, NewObject);
end;

{ TBronj }

function TBronj._Get_M_Data_bronirovaniya: TBADateTime;
begin
  assert(ValidateMember('TBronj', 'Data_bronirovaniya', 0, TBADateTime));
  Result := TBADateTime(BoldMembers[0]);
end;

function TBronj._GetData_bronirovaniya: TDateTime;
begin
  Result := M_Data_bronirovaniya.AsDateTime;
end;

procedure TBronj._SetData_bronirovaniya(const NewValue: TDateTime);
begin
  M_Data_bronirovaniya.AsDateTime := NewValue;
end;

function TBronj._Get_M_Zanyal_nomer: TBABoolean;
begin
  assert(ValidateMember('TBronj', 'Zanyal_nomer', 1, TBABoolean));
  Result := TBABoolean(BoldMembers[1]);
end;

function TBronj._GetZanyal_nomer: Boolean;
begin
  Result := M_Zanyal_nomer.AsBoolean;
end;

procedure TBronj._SetZanyal_nomer(const NewValue: Boolean);
begin
  M_Zanyal_nomer.AsBoolean := NewValue;
end;

function TBronj._Get_M_Ne_priehal: TBABoolean;
begin
  assert(ValidateMember('TBronj', 'Ne_priehal', 2, TBABoolean));
  Result := TBABoolean(BoldMembers[2]);
end;

function TBronj._GetNe_priehal: Boolean;
begin
  Result := M_Ne_priehal.AsBoolean;
end;

procedure TBronj._SetNe_priehal(const NewValue: Boolean);
begin
  M_Ne_priehal.AsBoolean := NewValue;
end;

function TBronj._Get_M_Proideno: TBABoolean;
begin
  assert(ValidateMember('TBronj', 'Proideno', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TBronj._GetProideno: Boolean;
begin
  Result := M_Proideno.AsBoolean;
end;

function TBronj._Get_M_Na_datu: TBADateTime;
begin
  assert(ValidateMember('TBronj', 'Na_datu', 4, TBADateTime));
  Result := TBADateTime(BoldMembers[4]);
end;

function TBronj._GetNa_datu: TDateTime;
begin
  Result := M_Na_datu.AsDateTime;
end;

procedure TBronj._SetNa_datu(const NewValue: TDateTime);
begin
  M_Na_datu.AsDateTime := NewValue;
end;

function TBronj._Get_M_Do_daty: TBADateTime;
begin
  assert(ValidateMember('TBronj', 'Do_daty', 5, TBADateTime));
  Result := TBADateTime(BoldMembers[5]);
end;

function TBronj._GetDo_daty: TDateTime;
begin
  Result := M_Do_daty.AsDateTime;
end;

procedure TBronj._SetDo_daty(const NewValue: TDateTime);
begin
  M_Do_daty.AsDateTime := NewValue;
end;

function TBronj._Get_M_Na_kol_chelovek: TBAInteger;
begin
  assert(ValidateMember('TBronj', 'Na_kol_chelovek', 6, TBAInteger));
  Result := TBAInteger(BoldMembers[6]);
end;

function TBronj._GetNa_kol_chelovek: Integer;
begin
  Result := M_Na_kol_chelovek.AsInteger;
end;

procedure TBronj._SetNa_kol_chelovek(const NewValue: Integer);
begin
  M_Na_kol_chelovek.AsInteger := NewValue;
end;

function TBronj._Get_M_Vygr_v_internet: TBABoolean;
begin
  assert(ValidateMember('TBronj', 'Vygr_v_internet', 7, TBABoolean));
  Result := TBABoolean(BoldMembers[7]);
end;

function TBronj._GetVygr_v_internet: Boolean;
begin
  Result := M_Vygr_v_internet.AsBoolean;
end;

procedure TBronj._SetVygr_v_internet(const NewValue: Boolean);
begin
  M_Vygr_v_internet.AsBoolean := NewValue;
end;

function TBronj._Get_M_Zagr_iz_interneta: TBABoolean;
begin
  assert(ValidateMember('TBronj', 'Zagr_iz_interneta', 8, TBABoolean));
  Result := TBABoolean(BoldMembers[8]);
end;

function TBronj._GetZagr_iz_interneta: Boolean;
begin
  Result := M_Zagr_iz_interneta.AsBoolean;
end;

procedure TBronj._SetZagr_iz_interneta(const NewValue: Boolean);
begin
  M_Zagr_iz_interneta.AsBoolean := NewValue;
end;

function TBronj._Get_M_IDInternet: TBAInteger;
begin
  assert(ValidateMember('TBronj', 'IDInternet', 9, TBAInteger));
  Result := TBAInteger(BoldMembers[9]);
end;

function TBronj._GetIDInternet: Integer;
begin
  Result := M_IDInternet.AsInteger;
end;

procedure TBronj._SetIDInternet(const NewValue: Integer);
begin
  M_IDInternet.AsInteger := NewValue;
end;

function TBronj._Get_M_Predoplata: TBAFloat;
begin
  assert(ValidateMember('TBronj', 'Predoplata', 10, TBAFloat));
  Result := TBAFloat(BoldMembers[10]);
end;

function TBronj._GetPredoplata: double;
begin
  Result := M_Predoplata.AsFloat;
end;

procedure TBronj._SetPredoplata(const NewValue: double);
begin
  M_Predoplata.AsFloat := NewValue;
end;

function TBronj._Get_M_zavedena_na_klienta: TBoldObjectReference;
begin
  assert(ValidateMember('TBronj', 'zavedena_na_klienta', 11, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[11]);
end;

function TBronj._Getzavedena_na_klienta: TKlient;
begin
  assert(not assigned(M_zavedena_na_klienta.BoldObject) or (M_zavedena_na_klienta.BoldObject is TKlient), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'zavedena_na_klienta', M_zavedena_na_klienta.BoldObject.ClassName, 'TKlient']));
  Result := TKlient(M_zavedena_na_klienta.BoldObject);
end;

procedure TBronj._Setzavedena_na_klienta(const value: TKlient);
begin
  M_zavedena_na_klienta.BoldObject := value;
end;

function TBronj._Get_M_rezerviruet: TBoldObjectReference;
begin
  assert(ValidateMember('TBronj', 'rezerviruet', 12, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[12]);
end;

function TBronj._Getrezerviruet: TNomer_arendy;
begin
  assert(not assigned(M_rezerviruet.BoldObject) or (M_rezerviruet.BoldObject is TNomer_arendy), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'rezerviruet', M_rezerviruet.BoldObject.ClassName, 'TNomer_arendy']));
  Result := TNomer_arendy(M_rezerviruet.BoldObject);
end;

procedure TBronj._Setrezerviruet(const value: TNomer_arendy);
begin
  M_rezerviruet.BoldObject := value;
end;

procedure TBronjList.Add(NewObject: TBronj);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBronjList.IndexOf(anObject: TBronj): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBronjList.Includes(anObject: TBronj) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBronjList.AddNew: TBronj;
begin
  result := TBronj(InternalAddNew);
end;

procedure TBronjList.Insert(index: Integer; NewObject: TBronj);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBronjList.GetBoldObject(index: Integer): TBronj;
begin
  result := TBronj(GetElement(index));
end;

procedure TBronjList.SetBoldObject(index: Integer; NewObject: TBronj);
begin;
  SetElement(index, NewObject);
end;

{ TLog_operacii }

function TLog_operacii._Get_M_Naimenovanie_operacii: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Naimenovanie_operacii', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TLog_operacii._GetNaimenovanie_operacii: String;
begin
  Result := M_Naimenovanie_operacii.AsString;
end;

procedure TLog_operacii._SetNaimenovanie_operacii(const NewValue: String);
begin
  M_Naimenovanie_operacii.AsString := NewValue;
end;

function TLog_operacii._Get_M_Subjekt: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Subjekt', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TLog_operacii._GetSubjekt: String;
begin
  Result := M_Subjekt.AsString;
end;

function TLog_operacii._Get_M_Data_i_vremya: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Data_i_vremya', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TLog_operacii._GetData_i_vremya: String;
begin
  Result := M_Data_i_vremya.AsString;
end;

function TLog_operacii._Get_M_Data: TBADate;
begin
  assert(ValidateMember('TLog_operacii', 'Data', 3, TBADate));
  Result := TBADate(BoldMembers[3]);
end;

function TLog_operacii._GetData: TDate;
begin
  Result := M_Data.AsDate;
end;

procedure TLog_operacii._SetData(const NewValue: TDate);
begin
  M_Data.AsDate := NewValue;
end;

function TLog_operacii._Get_M_Vremya: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Vremya', 4, TBAString));
  Result := TBAString(BoldMembers[4]);
end;

function TLog_operacii._GetVremya: String;
begin
  Result := M_Vremya.AsString;
end;

procedure TLog_operacii._SetVremya(const NewValue: String);
begin
  M_Vremya.AsString := NewValue;
end;

function TLog_operacii._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Kommentarii', 5, TBAString));
  Result := TBAString(BoldMembers[5]);
end;

function TLog_operacii._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TLog_operacii._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TLog_operacii._Get_M_ot_deistvii: TBoldObjectReference;
begin
  assert(ValidateMember('TLog_operacii', 'ot_deistvii', 6, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[6]);
end;

function TLog_operacii._Getot_deistvii: TPersonal;
begin
  assert(not assigned(M_ot_deistvii.BoldObject) or (M_ot_deistvii.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ot_deistvii', M_ot_deistvii.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_ot_deistvii.BoldObject);
end;

procedure TLog_operacii._Setot_deistvii(const value: TPersonal);
begin
  M_ot_deistvii.BoldObject := value;
end;

procedure TLog_operaciiList.Add(NewObject: TLog_operacii);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TLog_operaciiList.IndexOf(anObject: TLog_operacii): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TLog_operaciiList.Includes(anObject: TLog_operacii) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TLog_operaciiList.AddNew: TLog_operacii;
begin
  result := TLog_operacii(InternalAddNew);
end;

procedure TLog_operaciiList.Insert(index: Integer; NewObject: TLog_operacii);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TLog_operaciiList.GetBoldObject(index: Integer): TLog_operacii;
begin
  result := TLog_operacii(GetElement(index));
end;

procedure TLog_operaciiList.SetBoldObject(index: Integer; NewObject: TLog_operacii);
begin;
  SetElement(index, NewObject);
end;

{ TNastroiki }

function TNastroiki._Get_M_Tekushee_vremya: TBADateTime;
begin
  assert(ValidateMember('TNastroiki', 'Tekushee_vremya', 0, TBADateTime));
  Result := TBADateTime(BoldMembers[0]);
end;

function TNastroiki._GetTekushee_vremya: TDateTime;
begin
  Result := M_Tekushee_vremya.AsDateTime;
end;

procedure TNastroiki._SetTekushee_vremya(const NewValue: TDateTime);
begin
  M_Tekushee_vremya.AsDateTime := NewValue;
end;

function TNastroiki._Get_M_Nachalo_intervala: TBADateTime;
begin
  assert(ValidateMember('TNastroiki', 'Nachalo_intervala', 1, TBADateTime));
  Result := TBADateTime(BoldMembers[1]);
end;

function TNastroiki._GetNachalo_intervala: TDateTime;
begin
  Result := M_Nachalo_intervala.AsDateTime;
end;

procedure TNastroiki._SetNachalo_intervala(const NewValue: TDateTime);
begin
  M_Nachalo_intervala.AsDateTime := NewValue;
end;

function TNastroiki._Get_M_Konec_intervala: TBADateTime;
begin
  assert(ValidateMember('TNastroiki', 'Konec_intervala', 2, TBADateTime));
  Result := TBADateTime(BoldMembers[2]);
end;

function TNastroiki._GetKonec_intervala: TDateTime;
begin
  Result := M_Konec_intervala.AsDateTime;
end;

procedure TNastroiki._SetKonec_intervala(const NewValue: TDateTime);
begin
  M_Konec_intervala.AsDateTime := NewValue;
end;

function TNastroiki._Get_M_Nachalo_sezona: TBADateTime;
begin
  assert(ValidateMember('TNastroiki', 'Nachalo_sezona', 3, TBADateTime));
  Result := TBADateTime(BoldMembers[3]);
end;

function TNastroiki._GetNachalo_sezona: TDateTime;
begin
  Result := M_Nachalo_sezona.AsDateTime;
end;

procedure TNastroiki._SetNachalo_sezona(const NewValue: TDateTime);
begin
  M_Nachalo_sezona.AsDateTime := NewValue;
end;

function TNastroiki._Get_M_Konec_sezona: TBADateTime;
begin
  assert(ValidateMember('TNastroiki', 'Konec_sezona', 4, TBADateTime));
  Result := TBADateTime(BoldMembers[4]);
end;

function TNastroiki._GetKonec_sezona: TDateTime;
begin
  Result := M_Konec_sezona.AsDateTime;
end;

procedure TNastroiki._SetKonec_sezona(const NewValue: TDateTime);
begin
  M_Konec_sezona.AsDateTime := NewValue;
end;

function TNastroiki._Get_M_Vych_za_sezon: TBABoolean;
begin
  assert(ValidateMember('TNastroiki', 'Vych_za_sezon', 5, TBABoolean));
  Result := TBABoolean(BoldMembers[5]);
end;

function TNastroiki._GetVych_za_sezon: Boolean;
begin
  Result := M_Vych_za_sezon.AsBoolean;
end;

procedure TNastroiki._SetVych_za_sezon(const NewValue: Boolean);
begin
  M_Vych_za_sezon.AsBoolean := NewValue;
end;

function TNastroiki._Get_M_Cvet_fona_svobodnyh: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_fona_svobodnyh', 6, TBAString));
  Result := TBAString(BoldMembers[6]);
end;

function TNastroiki._GetCvet_fona_svobodnyh: String;
begin
  Result := M_Cvet_fona_svobodnyh.AsString;
end;

procedure TNastroiki._SetCvet_fona_svobodnyh(const NewValue: String);
begin
  M_Cvet_fona_svobodnyh.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_teksta_svob: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_teksta_svob', 7, TBAString));
  Result := TBAString(BoldMembers[7]);
end;

function TNastroiki._GetCvet_teksta_svob: String;
begin
  Result := M_Cvet_teksta_svob.AsString;
end;

procedure TNastroiki._SetCvet_teksta_svob(const NewValue: String);
begin
  M_Cvet_teksta_svob.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_fona_zanyatyh: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_fona_zanyatyh', 8, TBAString));
  Result := TBAString(BoldMembers[8]);
end;

function TNastroiki._GetCvet_fona_zanyatyh: String;
begin
  Result := M_Cvet_fona_zanyatyh.AsString;
end;

procedure TNastroiki._SetCvet_fona_zanyatyh(const NewValue: String);
begin
  M_Cvet_fona_zanyatyh.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_teksta_zanyatyh: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_teksta_zanyatyh', 9, TBAString));
  Result := TBAString(BoldMembers[9]);
end;

function TNastroiki._GetCvet_teksta_zanyatyh: String;
begin
  Result := M_Cvet_teksta_zanyatyh.AsString;
end;

procedure TNastroiki._SetCvet_teksta_zanyatyh(const NewValue: String);
begin
  M_Cvet_teksta_zanyatyh.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_fona_bronir: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_fona_bronir', 10, TBAString));
  Result := TBAString(BoldMembers[10]);
end;

function TNastroiki._GetCvet_fona_bronir: String;
begin
  Result := M_Cvet_fona_bronir.AsString;
end;

procedure TNastroiki._SetCvet_fona_bronir(const NewValue: String);
begin
  M_Cvet_fona_bronir.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_teksta_bronir: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_teksta_bronir', 11, TBAString));
  Result := TBAString(BoldMembers[11]);
end;

function TNastroiki._GetCvet_teksta_bronir: String;
begin
  Result := M_Cvet_teksta_bronir.AsString;
end;

procedure TNastroiki._SetCvet_teksta_bronir(const NewValue: String);
begin
  M_Cvet_teksta_bronir.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_fona_perenasel: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_fona_perenasel', 12, TBAString));
  Result := TBAString(BoldMembers[12]);
end;

function TNastroiki._GetCvet_fona_perenasel: String;
begin
  Result := M_Cvet_fona_perenasel.AsString;
end;

procedure TNastroiki._SetCvet_fona_perenasel(const NewValue: String);
begin
  M_Cvet_fona_perenasel.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_teksta_perenasel: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_teksta_perenasel', 13, TBAString));
  Result := TBAString(BoldMembers[13]);
end;

function TNastroiki._GetCvet_teksta_perenasel: String;
begin
  Result := M_Cvet_teksta_perenasel.AsString;
end;

procedure TNastroiki._SetCvet_teksta_perenasel(const NewValue: String);
begin
  M_Cvet_teksta_perenasel.AsString := NewValue;
end;

function TNastroiki._Get_M_Identifikator_otelya: TBAInteger;
begin
  assert(ValidateMember('TNastroiki', 'Identifikator_otelya', 14, TBAInteger));
  Result := TBAInteger(BoldMembers[14]);
end;

function TNastroiki._GetIdentifikator_otelya: Integer;
begin
  Result := M_Identifikator_otelya.AsInteger;
end;

procedure TNastroiki._SetIdentifikator_otelya(const NewValue: Integer);
begin
  M_Identifikator_otelya.AsInteger := NewValue;
end;

function TNastroiki._Get_M_Tek_vremya: TBADateTime;
begin
  assert(ValidateMember('TNastroiki', 'Tek_vremya', 15, TBADateTime));
  Result := TBADateTime(BoldMembers[15]);
end;

function TNastroiki._GetTek_vremya: TDateTime;
begin
  Result := M_Tek_vremya.AsDateTime;
end;

procedure TNastroiki._SetTek_vremya(const NewValue: TDateTime);
begin
  M_Tek_vremya.AsDateTime := NewValue;
end;

function TNastroiki._Get_M_Dopustimoe_vremya_lishn: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Dopustimoe_vremya_lishn', 16, TBAString));
  Result := TBAString(BoldMembers[16]);
end;

function TNastroiki._GetDopustimoe_vremya_lishn: String;
begin
  Result := M_Dopustimoe_vremya_lishn.AsString;
end;

procedure TNastroiki._SetDopustimoe_vremya_lishn(const NewValue: String);
begin
  M_Dopustimoe_vremya_lishn.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_fona_ogid: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_fona_ogid', 17, TBAString));
  Result := TBAString(BoldMembers[17]);
end;

function TNastroiki._GetCvet_fona_ogid: String;
begin
  Result := M_Cvet_fona_ogid.AsString;
end;

procedure TNastroiki._SetCvet_fona_ogid(const NewValue: String);
begin
  M_Cvet_fona_ogid.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_teksta_ogid: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_teksta_ogid', 18, TBAString));
  Result := TBAString(BoldMembers[18]);
end;

function TNastroiki._GetCvet_teksta_ogid: String;
begin
  Result := M_Cvet_teksta_ogid.AsString;
end;

procedure TNastroiki._SetCvet_teksta_ogid(const NewValue: String);
begin
  M_Cvet_teksta_ogid.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_fona_neoplach: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_fona_neoplach', 19, TBAString));
  Result := TBAString(BoldMembers[19]);
end;

function TNastroiki._GetCvet_fona_neoplach: String;
begin
  Result := M_Cvet_fona_neoplach.AsString;
end;

procedure TNastroiki._SetCvet_fona_neoplach(const NewValue: String);
begin
  M_Cvet_fona_neoplach.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_teksta_neoplach: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_teksta_neoplach', 20, TBAString));
  Result := TBAString(BoldMembers[20]);
end;

function TNastroiki._GetCvet_teksta_neoplach: String;
begin
  Result := M_Cvet_teksta_neoplach.AsString;
end;

procedure TNastroiki._SetCvet_teksta_neoplach(const NewValue: String);
begin
  M_Cvet_teksta_neoplach.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_fona_sverhsroka: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_fona_sverhsroka', 21, TBAString));
  Result := TBAString(BoldMembers[21]);
end;

function TNastroiki._GetCvet_fona_sverhsroka: String;
begin
  Result := M_Cvet_fona_sverhsroka.AsString;
end;

procedure TNastroiki._SetCvet_fona_sverhsroka(const NewValue: String);
begin
  M_Cvet_fona_sverhsroka.AsString := NewValue;
end;

function TNastroiki._Get_M_Cvet_teksta_sverhsroka: TBAString;
begin
  assert(ValidateMember('TNastroiki', 'Cvet_teksta_sverhsroka', 22, TBAString));
  Result := TBAString(BoldMembers[22]);
end;

function TNastroiki._GetCvet_teksta_sverhsroka: String;
begin
  Result := M_Cvet_teksta_sverhsroka.AsString;
end;

procedure TNastroiki._SetCvet_teksta_sverhsroka(const NewValue: String);
begin
  M_Cvet_teksta_sverhsroka.AsString := NewValue;
end;

function TNastroiki._Get_M_Schitatj_chasy_pri_pereocenk: TBABoolean;
begin
  assert(ValidateMember('TNastroiki', 'Schitatj_chasy_pri_pereocenk', 23, TBABoolean));
  Result := TBABoolean(BoldMembers[23]);
end;

function TNastroiki._GetSchitatj_chasy_pri_pereocenk: Boolean;
begin
  Result := M_Schitatj_chasy_pri_pereocenk.AsBoolean;
end;

procedure TNastroiki._SetSchitatj_chasy_pri_pereocenk(const NewValue: Boolean);
begin
  M_Schitatj_chasy_pri_pereocenk.AsBoolean := NewValue;
end;

function TNastroiki._Get_M_Avtomatich_zagruzka_fotodannyh: TBABoolean;
begin
  assert(ValidateMember('TNastroiki', 'Avtomatich_zagruzka_fotodannyh', 24, TBABoolean));
  Result := TBABoolean(BoldMembers[24]);
end;

function TNastroiki._GetAvtomatich_zagruzka_fotodannyh: Boolean;
begin
  Result := M_Avtomatich_zagruzka_fotodannyh.AsBoolean;
end;

procedure TNastroiki._SetAvtomatich_zagruzka_fotodannyh(const NewValue: Boolean);
begin
  M_Avtomatich_zagruzka_fotodannyh.AsBoolean := NewValue;
end;

function TNastroiki._Get_M_Tek_data: TBADate;
begin
  assert(ValidateMember('TNastroiki', 'Tek_data', 25, TBADate));
  Result := TBADate(BoldMembers[25]);
end;

function TNastroiki._GetTek_data: TDate;
begin
  Result := M_Tek_data.AsDate;
end;

procedure TNastroiki._SetTek_data(const NewValue: TDate);
begin
  M_Tek_data.AsDate := NewValue;
end;

function TNastroiki._Get_M_Schitatj_dlya_kagd_kl: TBABoolean;
begin
  assert(ValidateMember('TNastroiki', 'Schitatj_dlya_kagd_kl', 26, TBABoolean));
  Result := TBABoolean(BoldMembers[26]);
end;

function TNastroiki._GetSchitatj_dlya_kagd_kl: Boolean;
begin
  Result := M_Schitatj_dlya_kagd_kl.AsBoolean;
end;

procedure TNastroiki._SetSchitatj_dlya_kagd_kl(const NewValue: Boolean);
begin
  M_Schitatj_dlya_kagd_kl.AsBoolean := NewValue;
end;

function TNastroiki._Get_M_Stoim_na_chel_ot_stoim_nom: TBABoolean;
begin
  assert(ValidateMember('TNastroiki', 'Stoim_na_chel_ot_stoim_nom', 27, TBABoolean));
  Result := TBABoolean(BoldMembers[27]);
end;

function TNastroiki._GetStoim_na_chel_ot_stoim_nom: Boolean;
begin
  Result := M_Stoim_na_chel_ot_stoim_nom.AsBoolean;
end;

procedure TNastroiki._SetStoim_na_chel_ot_stoim_nom(const NewValue: Boolean);
begin
  M_Stoim_na_chel_ot_stoim_nom.AsBoolean := NewValue;
end;

function TNastroiki._Get_M_Schit_po_cen_politike: TBABoolean;
begin
  assert(ValidateMember('TNastroiki', 'Schit_po_cen_politike', 28, TBABoolean));
  Result := TBABoolean(BoldMembers[28]);
end;

function TNastroiki._GetSchit_po_cen_politike: Boolean;
begin
  Result := M_Schit_po_cen_politike.AsBoolean;
end;

procedure TNastroiki._SetSchit_po_cen_politike(const NewValue: Boolean);
begin
  M_Schit_po_cen_politike.AsBoolean := NewValue;
end;

function TNastroiki._Getopr_nastr_dlya_klassa: TKlass_nomeraList;
begin
  assert(ValidateMember('TNastroiki', 'opr_nastr_dlya_klassa', 29, TKlass_nomeraList));
  Result := TKlass_nomeraList(BoldMembers[29]);
end;

procedure TNastroikiList.Add(NewObject: TNastroiki);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TNastroikiList.IndexOf(anObject: TNastroiki): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TNastroikiList.Includes(anObject: TNastroiki) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TNastroikiList.AddNew: TNastroiki;
begin
  result := TNastroiki(InternalAddNew);
end;

procedure TNastroikiList.Insert(index: Integer; NewObject: TNastroiki);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TNastroikiList.GetBoldObject(index: Integer): TNastroiki;
begin
  result := TNastroiki(GetElement(index));
end;

procedure TNastroikiList.SetBoldObject(index: Integer; NewObject: TNastroiki);
begin;
  SetElement(index, NewObject);
end;

{ TNomer_arendy }

function TNomer_arendy._Get_M_Nomer: TBAInteger;
begin
  assert(ValidateMember('TNomer_arendy', 'Nomer', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TNomer_arendy._GetNomer: Integer;
begin
  Result := M_Nomer.AsInteger;
end;

procedure TNomer_arendy._SetNomer(const NewValue: Integer);
begin
  M_Nomer.AsInteger := NewValue;
end;

function TNomer_arendy._Get_M_Stoimostj_v_sutki: TBAFloat;
begin
  assert(ValidateMember('TNomer_arendy', 'Stoimostj_v_sutki', 1, TBAFloat));
  Result := TBAFloat(BoldMembers[1]);
end;

function TNomer_arendy._GetStoimostj_v_sutki: double;
begin
  Result := M_Stoimostj_v_sutki.AsFloat;
end;

procedure TNomer_arendy._SetStoimostj_v_sutki(const NewValue: double);
begin
  M_Stoimostj_v_sutki.AsFloat := NewValue;
end;

function TNomer_arendy._Get_M_Stoim_v_sutki_vychisl: TBAFloat;
begin
  assert(ValidateMember('TNomer_arendy', 'Stoim_v_sutki_vychisl', 2, TBAFloat));
  Result := TBAFloat(BoldMembers[2]);
end;

function TNomer_arendy._GetStoim_v_sutki_vychisl: double;
begin
  Result := M_Stoim_v_sutki_vychisl.AsFloat;
end;

function TNomer_arendy._Get_M_Zabronirovan: TBABoolean;
begin
  assert(ValidateMember('TNomer_arendy', 'Zabronirovan', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TNomer_arendy._GetZabronirovan: Boolean;
begin
  Result := M_Zabronirovan.AsBoolean;
end;

function TNomer_arendy._Get_M_Zanyat: TBABoolean;
begin
  assert(ValidateMember('TNomer_arendy', 'Zanyat', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TNomer_arendy._GetZanyat: Boolean;
begin
  Result := M_Zanyat.AsBoolean;
end;

function TNomer_arendy._Get_M_Svoboden: TBABoolean;
begin
  assert(ValidateMember('TNomer_arendy', 'Svoboden', 5, TBABoolean));
  Result := TBABoolean(BoldMembers[5]);
end;

function TNomer_arendy._GetSvoboden: Boolean;
begin
  Result := M_Svoboden.AsBoolean;
end;

function TNomer_arendy._Get_M_Chislo_chelovek: TBAInteger;
begin
  assert(ValidateMember('TNomer_arendy', 'Chislo_chelovek', 6, TBAInteger));
  Result := TBAInteger(BoldMembers[6]);
end;

function TNomer_arendy._GetChislo_chelovek: Integer;
begin
  Result := M_Chislo_chelovek.AsInteger;
end;

procedure TNomer_arendy._SetChislo_chelovek(const NewValue: Integer);
begin
  M_Chislo_chelovek.AsInteger := NewValue;
end;

function TNomer_arendy._Get_M_Perepolnen: TBABoolean;
begin
  assert(ValidateMember('TNomer_arendy', 'Perepolnen', 7, TBABoolean));
  Result := TBABoolean(BoldMembers[7]);
end;

function TNomer_arendy._GetPerepolnen: Boolean;
begin
  Result := M_Perepolnen.AsBoolean;
end;

function TNomer_arendy._Get_M_Zarabotano_za_period: TBAFloat;
begin
  assert(ValidateMember('TNomer_arendy', 'Zarabotano_za_period', 8, TBAFloat));
  Result := TBAFloat(BoldMembers[8]);
end;

function TNomer_arendy._GetZarabotano_za_period: double;
begin
  Result := M_Zarabotano_za_period.AsFloat;
end;

function TNomer_arendy._Get_M_Identifikator_otelya: TBAInteger;
begin
  assert(ValidateMember('TNomer_arendy', 'Identifikator_otelya', 9, TBAInteger));
  Result := TBAInteger(BoldMembers[9]);
end;

function TNomer_arendy._GetIdentifikator_otelya: Integer;
begin
  Result := M_Identifikator_otelya.AsInteger;
end;

function TNomer_arendy._Get_M_Nachalo_intervala: TBADateTime;
begin
  assert(ValidateMember('TNomer_arendy', 'Nachalo_intervala', 10, TBADateTime));
  Result := TBADateTime(BoldMembers[10]);
end;

function TNomer_arendy._GetNachalo_intervala: TDateTime;
begin
  Result := M_Nachalo_intervala.AsDateTime;
end;

function TNomer_arendy._Get_M_Konec_intervala: TBADateTime;
begin
  assert(ValidateMember('TNomer_arendy', 'Konec_intervala', 11, TBADateTime));
  Result := TBADateTime(BoldMembers[11]);
end;

function TNomer_arendy._GetKonec_intervala: TDateTime;
begin
  Result := M_Konec_intervala.AsDateTime;
end;

function TNomer_arendy._Get_M_Tek_vremya: TBADateTime;
begin
  assert(ValidateMember('TNomer_arendy', 'Tek_vremya', 12, TBADateTime));
  Result := TBADateTime(BoldMembers[12]);
end;

function TNomer_arendy._GetTek_vremya: TDateTime;
begin
  Result := M_Tek_vremya.AsDateTime;
end;

function TNomer_arendy._Get_M_Opred_stoim_ot_klassa: TBABoolean;
begin
  assert(ValidateMember('TNomer_arendy', 'Opred_stoim_ot_klassa', 13, TBABoolean));
  Result := TBABoolean(BoldMembers[13]);
end;

function TNomer_arendy._GetOpred_stoim_ot_klassa: Boolean;
begin
  Result := M_Opred_stoim_ot_klassa.AsBoolean;
end;

procedure TNomer_arendy._SetOpred_stoim_ot_klassa(const NewValue: Boolean);
begin
  M_Opred_stoim_ot_klassa.AsBoolean := NewValue;
end;

function TNomer_arendy._Get_M_Zadolgaet_klient: TBABoolean;
begin
  assert(ValidateMember('TNomer_arendy', 'Zadolgaet_klient', 14, TBABoolean));
  Result := TBABoolean(BoldMembers[14]);
end;

function TNomer_arendy._GetZadolgaet_klient: Boolean;
begin
  Result := M_Zadolgaet_klient.AsBoolean;
end;

function TNomer_arendy._Get_M_Sverh_sroka: TBABoolean;
begin
  assert(ValidateMember('TNomer_arendy', 'Sverh_sroka', 15, TBABoolean));
  Result := TBABoolean(BoldMembers[15]);
end;

function TNomer_arendy._GetSverh_sroka: Boolean;
begin
  Result := M_Sverh_sroka.AsBoolean;
end;

function TNomer_arendy._Get_M_Perekryvaet_bronj: TBABoolean;
begin
  assert(ValidateMember('TNomer_arendy', 'Perekryvaet_bronj', 16, TBABoolean));
  Result := TBABoolean(BoldMembers[16]);
end;

function TNomer_arendy._GetPerekryvaet_bronj: Boolean;
begin
  Result := M_Perekryvaet_bronj.AsBoolean;
end;

function TNomer_arendy._Get_M_Blig_bronj: TBADateTime;
begin
  assert(ValidateMember('TNomer_arendy', 'Blig_bronj', 17, TBADateTime));
  Result := TBADateTime(BoldMembers[17]);
end;

function TNomer_arendy._GetBlig_bronj: TDateTime;
begin
  Result := M_Blig_bronj.AsDateTime;
end;

function TNomer_arendy._Get_M_Stoim_na_chel_v_sutki: TBAFloat;
begin
  assert(ValidateMember('TNomer_arendy', 'Stoim_na_chel_v_sutki', 18, TBAFloat));
  Result := TBAFloat(BoldMembers[18]);
end;

function TNomer_arendy._GetStoim_na_chel_v_sutki: double;
begin
  Result := M_Stoim_na_chel_v_sutki.AsFloat;
end;

procedure TNomer_arendy._SetStoim_na_chel_v_sutki(const NewValue: double);
begin
  M_Stoim_na_chel_v_sutki.AsFloat := NewValue;
end;

function TNomer_arendy._Get_M_Stoim_na_chel_vychisl: TBAFloat;
begin
  assert(ValidateMember('TNomer_arendy', 'Stoim_na_chel_vychisl', 19, TBAFloat));
  Result := TBAFloat(BoldMembers[19]);
end;

function TNomer_arendy._GetStoim_na_chel_vychisl: double;
begin
  Result := M_Stoim_na_chel_vychisl.AsFloat;
end;

function TNomer_arendy._Get_M_Kol_dop_mest_vychisl: TBAInteger;
begin
  assert(ValidateMember('TNomer_arendy', 'Kol_dop_mest_vychisl', 20, TBAInteger));
  Result := TBAInteger(BoldMembers[20]);
end;

function TNomer_arendy._GetKol_dop_mest_vychisl: Integer;
begin
  Result := M_Kol_dop_mest_vychisl.AsInteger;
end;

function TNomer_arendy._Get_M_Kol_dop_mest: TBAInteger;
begin
  assert(ValidateMember('TNomer_arendy', 'Kol_dop_mest', 21, TBAInteger));
  Result := TBAInteger(BoldMembers[21]);
end;

function TNomer_arendy._GetKol_dop_mest: Integer;
begin
  Result := M_Kol_dop_mest.AsInteger;
end;

procedure TNomer_arendy._SetKol_dop_mest(const NewValue: Integer);
begin
  M_Kol_dop_mest.AsInteger := NewValue;
end;

function TNomer_arendy._Get_M_Sootvetstvuet: TBoldObjectReference;
begin
  assert(ValidateMember('TNomer_arendy', 'Sootvetstvuet', 22, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[22]);
end;

function TNomer_arendy._GetSootvetstvuet: TKlass_nomera;
begin
  assert(not assigned(M_Sootvetstvuet.BoldObject) or (M_Sootvetstvuet.BoldObject is TKlass_nomera), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Sootvetstvuet', M_Sootvetstvuet.BoldObject.ClassName, 'TKlass_nomera']));
  Result := TKlass_nomera(M_Sootvetstvuet.BoldObject);
end;

procedure TNomer_arendy._SetSootvetstvuet(const value: TKlass_nomera);
begin
  M_Sootvetstvuet.BoldObject := value;
end;

function TNomer_arendy._GetEkspluataciya_fiks_v: TList_klientaList;
begin
  assert(ValidateMember('TNomer_arendy', 'Ekspluataciya_fiks_v', 23, TList_klientaList));
  Result := TList_klientaList(BoldMembers[23]);
end;

function TNomer_arendy._Get_M_nahoditsya_v_otele: TBoldObjectReference;
begin
  assert(ValidateMember('TNomer_arendy', 'nahoditsya_v_otele', 24, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[24]);
end;

function TNomer_arendy._Getnahoditsya_v_otele: TOtelj;
begin
  assert(not assigned(M_nahoditsya_v_otele.BoldObject) or (M_nahoditsya_v_otele.BoldObject is TOtelj), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'nahoditsya_v_otele', M_nahoditsya_v_otele.BoldObject.ClassName, 'TOtelj']));
  Result := TOtelj(M_nahoditsya_v_otele.BoldObject);
end;

procedure TNomer_arendy._Setnahoditsya_v_otele(const value: TOtelj);
begin
  M_nahoditsya_v_otele.BoldObject := value;
end;

function TNomer_arendy._Get_M_nahoditsya_v_korpuse: TBoldObjectReference;
begin
  assert(ValidateMember('TNomer_arendy', 'nahoditsya_v_korpuse', 25, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[25]);
end;

function TNomer_arendy._Getnahoditsya_v_korpuse: TKorpus;
begin
  assert(not assigned(M_nahoditsya_v_korpuse.BoldObject) or (M_nahoditsya_v_korpuse.BoldObject is TKorpus), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'nahoditsya_v_korpuse', M_nahoditsya_v_korpuse.BoldObject.ClassName, 'TKorpus']));
  Result := TKorpus(M_nahoditsya_v_korpuse.BoldObject);
end;

procedure TNomer_arendy._Setnahoditsya_v_korpuse(const value: TKorpus);
begin
  M_nahoditsya_v_korpuse.BoldObject := value;
end;

function TNomer_arendy._Getzarezervirovan: TBronjList;
begin
  assert(ValidateMember('TNomer_arendy', 'zarezervirovan', 26, TBronjList));
  Result := TBronjList(BoldMembers[26]);
end;

function TNomer_arendy._Getzapisan_v_ogidanie: TOgidanieList;
begin
  assert(ValidateMember('TNomer_arendy', 'zapisan_v_ogidanie', 27, TOgidanieList));
  Result := TOgidanieList(BoldMembers[27]);
end;

procedure TNomer_arendyList.Add(NewObject: TNomer_arendy);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TNomer_arendyList.IndexOf(anObject: TNomer_arendy): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TNomer_arendyList.Includes(anObject: TNomer_arendy) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TNomer_arendyList.AddNew: TNomer_arendy;
begin
  result := TNomer_arendy(InternalAddNew);
end;

procedure TNomer_arendyList.Insert(index: Integer; NewObject: TNomer_arendy);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TNomer_arendyList.GetBoldObject(index: Integer): TNomer_arendy;
begin
  result := TNomer_arendy(GetElement(index));
end;

procedure TNomer_arendyList.SetBoldObject(index: Integer; NewObject: TNomer_arendy);
begin;
  SetElement(index, NewObject);
end;

function TNomer_arendy.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  if (Member = M_Perekryvaet_bronj) then result := _Perekryvaet_bronj_DeriveAndSubscribe else
  if (Member = M_Kol_dop_mest_vychisl) then result := _Kol_dop_mest_vychisl_DeriveAndSubscribe else
  result := inherited GetDeriveMethodForMember(Member);
end;

function TNomer_arendy.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

{ TOgidanie }

function TOgidanie._Get_M_Nachalo_ogidaniya: TBADateTime;
begin
  assert(ValidateMember('TOgidanie', 'Nachalo_ogidaniya', 0, TBADateTime));
  Result := TBADateTime(BoldMembers[0]);
end;

function TOgidanie._GetNachalo_ogidaniya: TDateTime;
begin
  Result := M_Nachalo_ogidaniya.AsDateTime;
end;

procedure TOgidanie._SetNachalo_ogidaniya(const NewValue: TDateTime);
begin
  M_Nachalo_ogidaniya.AsDateTime := NewValue;
end;

function TOgidanie._Get_M_Dogdalsya: TBABoolean;
begin
  assert(ValidateMember('TOgidanie', 'Dogdalsya', 1, TBABoolean));
  Result := TBABoolean(BoldMembers[1]);
end;

function TOgidanie._GetDogdalsya: Boolean;
begin
  Result := M_Dogdalsya.AsBoolean;
end;

procedure TOgidanie._SetDogdalsya(const NewValue: Boolean);
begin
  M_Dogdalsya.AsBoolean := NewValue;
end;

function TOgidanie._Get_M_Ne_dogdalsya: TBABoolean;
begin
  assert(ValidateMember('TOgidanie', 'Ne_dogdalsya', 2, TBABoolean));
  Result := TBABoolean(BoldMembers[2]);
end;

function TOgidanie._GetNe_dogdalsya: Boolean;
begin
  Result := M_Ne_dogdalsya.AsBoolean;
end;

procedure TOgidanie._SetNe_dogdalsya(const NewValue: Boolean);
begin
  M_Ne_dogdalsya.AsBoolean := NewValue;
end;

function TOgidanie._Get_M_Proideno: TBABoolean;
begin
  assert(ValidateMember('TOgidanie', 'Proideno', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TOgidanie._GetProideno: Boolean;
begin
  Result := M_Proideno.AsBoolean;
end;

function TOgidanie._Get_M_Na_kol_chelovek: TBAInteger;
begin
  assert(ValidateMember('TOgidanie', 'Na_kol_chelovek', 4, TBAInteger));
  Result := TBAInteger(BoldMembers[4]);
end;

function TOgidanie._GetNa_kol_chelovek: Integer;
begin
  Result := M_Na_kol_chelovek.AsInteger;
end;

procedure TOgidanie._SetNa_kol_chelovek(const NewValue: Integer);
begin
  M_Na_kol_chelovek.AsInteger := NewValue;
end;

function TOgidanie._Get_M_ogidaet_klient: TBoldObjectReference;
begin
  assert(ValidateMember('TOgidanie', 'ogidaet_klient', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TOgidanie._Getogidaet_klient: TKlient;
begin
  assert(not assigned(M_ogidaet_klient.BoldObject) or (M_ogidaet_klient.BoldObject is TKlient), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ogidaet_klient', M_ogidaet_klient.BoldObject.ClassName, 'TKlient']));
  Result := TKlient(M_ogidaet_klient.BoldObject);
end;

procedure TOgidanie._Setogidaet_klient(const value: TKlient);
begin
  M_ogidaet_klient.BoldObject := value;
end;

function TOgidanie._Get_M_ogidanie_nomera: TBoldObjectReference;
begin
  assert(ValidateMember('TOgidanie', 'ogidanie_nomera', 6, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[6]);
end;

function TOgidanie._Getogidanie_nomera: TNomer_arendy;
begin
  assert(not assigned(M_ogidanie_nomera.BoldObject) or (M_ogidanie_nomera.BoldObject is TNomer_arendy), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ogidanie_nomera', M_ogidanie_nomera.BoldObject.ClassName, 'TNomer_arendy']));
  Result := TNomer_arendy(M_ogidanie_nomera.BoldObject);
end;

procedure TOgidanie._Setogidanie_nomera(const value: TNomer_arendy);
begin
  M_ogidanie_nomera.BoldObject := value;
end;

procedure TOgidanieList.Add(NewObject: TOgidanie);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOgidanieList.IndexOf(anObject: TOgidanie): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOgidanieList.Includes(anObject: TOgidanie) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOgidanieList.AddNew: TOgidanie;
begin
  result := TOgidanie(InternalAddNew);
end;

procedure TOgidanieList.Insert(index: Integer; NewObject: TOgidanie);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOgidanieList.GetBoldObject(index: Integer): TOgidanie;
begin
  result := TOgidanie(GetElement(index));
end;

procedure TOgidanieList.SetBoldObject(index: Integer; NewObject: TOgidanie);
begin;
  SetElement(index, NewObject);
end;

{ TPereocenka }

function TPereocenka._Get_M_Data_pereocenki: TBADateTime;
begin
  assert(ValidateMember('TPereocenka', 'Data_pereocenki', 0, TBADateTime));
  Result := TBADateTime(BoldMembers[0]);
end;

function TPereocenka._GetData_pereocenki: TDateTime;
begin
  Result := M_Data_pereocenki.AsDateTime;
end;

procedure TPereocenka._SetData_pereocenki(const NewValue: TDateTime);
begin
  M_Data_pereocenki.AsDateTime := NewValue;
end;

function TPereocenka._Get_M_Summa: TBAFloat;
begin
  assert(ValidateMember('TPereocenka', 'Summa', 1, TBAFloat));
  Result := TBAFloat(BoldMembers[1]);
end;

function TPereocenka._GetSumma: double;
begin
  Result := M_Summa.AsFloat;
end;

procedure TPereocenka._SetSumma(const NewValue: double);
begin
  M_Summa.AsFloat := NewValue;
end;

function TPereocenka._Get_M_Opisanie: TBAString;
begin
  assert(ValidateMember('TPereocenka', 'Opisanie', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TPereocenka._GetOpisanie: String;
begin
  Result := M_Opisanie.AsString;
end;

procedure TPereocenka._SetOpisanie(const NewValue: String);
begin
  M_Opisanie.AsString := NewValue;
end;

function TPereocenka._Get_M_pereoceniv_stoim: TBoldObjectReference;
begin
  assert(ValidateMember('TPereocenka', 'pereoceniv_stoim', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TPereocenka._Getpereoceniv_stoim: TList_klienta;
begin
  assert(not assigned(M_pereoceniv_stoim.BoldObject) or (M_pereoceniv_stoim.BoldObject is TList_klienta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'pereoceniv_stoim', M_pereoceniv_stoim.BoldObject.ClassName, 'TList_klienta']));
  Result := TList_klienta(M_pereoceniv_stoim.BoldObject);
end;

procedure TPereocenka._Setpereoceniv_stoim(const value: TList_klienta);
begin
  M_pereoceniv_stoim.BoldObject := value;
end;

procedure TPereocenkaList.Add(NewObject: TPereocenka);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPereocenkaList.IndexOf(anObject: TPereocenka): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPereocenkaList.Includes(anObject: TPereocenka) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPereocenkaList.AddNew: TPereocenka;
begin
  result := TPereocenka(InternalAddNew);
end;

procedure TPereocenkaList.Insert(index: Integer; NewObject: TPereocenka);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPereocenkaList.GetBoldObject(index: Integer): TPereocenka;
begin
  result := TPereocenka(GetElement(index));
end;

procedure TPereocenkaList.SetBoldObject(index: Integer; NewObject: TPereocenka);
begin;
  SetElement(index, NewObject);
end;

{ TPersona }

function TPersona._Get_M_Familiya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Familiya', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TPersona._GetFamiliya: String;
begin
  Result := M_Familiya.AsString;
end;

procedure TPersona._SetFamiliya(const NewValue: String);
begin
  M_Familiya.AsString := NewValue;
end;

function TPersona._Get_M_Imya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Imya', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TPersona._GetImya: String;
begin
  Result := M_Imya.AsString;
end;

procedure TPersona._SetImya(const NewValue: String);
begin
  M_Imya.AsString := NewValue;
end;

function TPersona._Get_M_Otchestvo: TBAString;
begin
  assert(ValidateMember('TPersona', 'Otchestvo', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TPersona._GetOtchestvo: String;
begin
  Result := M_Otchestvo.AsString;
end;

procedure TPersona._SetOtchestvo(const NewValue: String);
begin
  M_Otchestvo.AsString := NewValue;
end;

function TPersona._Get_M_Ulica: TBAString;
begin
  assert(ValidateMember('TPersona', 'Ulica', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TPersona._GetUlica: String;
begin
  Result := M_Ulica.AsString;
end;

procedure TPersona._SetUlica(const NewValue: String);
begin
  M_Ulica.AsString := NewValue;
end;

function TPersona._Get_M_Dom: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Dom', 4, TBAInteger));
  Result := TBAInteger(BoldMembers[4]);
end;

function TPersona._GetDom: Integer;
begin
  Result := M_Dom.AsInteger;
end;

procedure TPersona._SetDom(const NewValue: Integer);
begin
  M_Dom.AsInteger := NewValue;
end;

function TPersona._Get_M_Kvartira: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Kvartira', 5, TBAInteger));
  Result := TBAInteger(BoldMembers[5]);
end;

function TPersona._GetKvartira: Integer;
begin
  Result := M_Kvartira.AsInteger;
end;

procedure TPersona._SetKvartira(const NewValue: Integer);
begin
  M_Kvartira.AsInteger := NewValue;
end;

function TPersona._Get_M_Korpus: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Korpus', 6, TBAInteger));
  Result := TBAInteger(BoldMembers[6]);
end;

function TPersona._GetKorpus: Integer;
begin
  Result := M_Korpus.AsInteger;
end;

procedure TPersona._SetKorpus(const NewValue: Integer);
begin
  M_Korpus.AsInteger := NewValue;
end;

function TPersona._Get_M_Mobiljnyi_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Mobiljnyi_telefon', 7, TBAString));
  Result := TBAString(BoldMembers[7]);
end;

function TPersona._GetMobiljnyi_telefon: String;
begin
  Result := M_Mobiljnyi_telefon.AsString;
end;

procedure TPersona._SetMobiljnyi_telefon(const NewValue: String);
begin
  M_Mobiljnyi_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Rabochii_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Rabochii_telefon', 8, TBAString));
  Result := TBAString(BoldMembers[8]);
end;

function TPersona._GetRabochii_telefon: String;
begin
  Result := M_Rabochii_telefon.AsString;
end;

procedure TPersona._SetRabochii_telefon(const NewValue: String);
begin
  M_Rabochii_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Domashnii_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Domashnii_telefon', 9, TBAString));
  Result := TBAString(BoldMembers[9]);
end;

function TPersona._GetDomashnii_telefon: String;
begin
  Result := M_Domashnii_telefon.AsString;
end;

procedure TPersona._SetDomashnii_telefon(const NewValue: String);
begin
  M_Domashnii_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Elektronnyi_adres: TBAString;
begin
  assert(ValidateMember('TPersona', 'Elektronnyi_adres', 10, TBAString));
  Result := TBAString(BoldMembers[10]);
end;

function TPersona._GetElektronnyi_adres: String;
begin
  Result := M_Elektronnyi_adres.AsString;
end;

procedure TPersona._SetElektronnyi_adres(const NewValue: String);
begin
  M_Elektronnyi_adres.AsString := NewValue;
end;

function TPersona._Get_M_Polnoe_imya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Polnoe_imya', 11, TBAString));
  Result := TBAString(BoldMembers[11]);
end;

function TPersona._GetPolnoe_imya: String;
begin
  Result := M_Polnoe_imya.AsString;
end;

function TPersona._Get_M_Seriya_pasporta: TBAString;
begin
  assert(ValidateMember('TPersona', 'Seriya_pasporta', 12, TBAString));
  Result := TBAString(BoldMembers[12]);
end;

function TPersona._GetSeriya_pasporta: String;
begin
  Result := M_Seriya_pasporta.AsString;
end;

procedure TPersona._SetSeriya_pasporta(const NewValue: String);
begin
  M_Seriya_pasporta.AsString := NewValue;
end;

function TPersona._Get_M_Propiska: TBAString;
begin
  assert(ValidateMember('TPersona', 'Propiska', 13, TBAString));
  Result := TBAString(BoldMembers[13]);
end;

function TPersona._GetPropiska: String;
begin
  Result := M_Propiska.AsString;
end;

function TPersona._Get_M_Kem_vydan: TBAString;
begin
  assert(ValidateMember('TPersona', 'Kem_vydan', 14, TBAString));
  Result := TBAString(BoldMembers[14]);
end;

function TPersona._GetKem_vydan: String;
begin
  Result := M_Kem_vydan.AsString;
end;

procedure TPersona._SetKem_vydan(const NewValue: String);
begin
  M_Kem_vydan.AsString := NewValue;
end;

function TPersona._Get_M_Mesto_rogdeniya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Mesto_rogdeniya', 15, TBAString));
  Result := TBAString(BoldMembers[15]);
end;

function TPersona._GetMesto_rogdeniya: String;
begin
  Result := M_Mesto_rogdeniya.AsString;
end;

procedure TPersona._SetMesto_rogdeniya(const NewValue: String);
begin
  M_Mesto_rogdeniya.AsString := NewValue;
end;

function TPersona._Get_M_Obshie_dannye: TBAString;
begin
  assert(ValidateMember('TPersona', 'Obshie_dannye', 16, TBAString));
  Result := TBAString(BoldMembers[16]);
end;

function TPersona._GetObshie_dannye: String;
begin
  Result := M_Obshie_dannye.AsString;
end;

procedure TPersona._SetObshie_dannye(const NewValue: String);
begin
  M_Obshie_dannye.AsString := NewValue;
end;

function TPersona._Get_M_Data_rogdeniya: TBADate;
begin
  assert(ValidateMember('TPersona', 'Data_rogdeniya', 17, TBADate));
  Result := TBADate(BoldMembers[17]);
end;

function TPersona._GetData_rogdeniya: TDate;
begin
  Result := M_Data_rogdeniya.AsDate;
end;

procedure TPersona._SetData_rogdeniya(const NewValue: TDate);
begin
  M_Data_rogdeniya.AsDate := NewValue;
end;

function TPersona._Get_M_Imeninnik: TBABoolean;
begin
  assert(ValidateMember('TPersona', 'Imeninnik', 18, TBABoolean));
  Result := TBABoolean(BoldMembers[18]);
end;

function TPersona._GetImeninnik: Boolean;
begin
  Result := M_Imeninnik.AsBoolean;
end;

procedure TPersonaList.Add(NewObject: TPersona);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonaList.IndexOf(anObject: TPersona): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonaList.Includes(anObject: TPersona) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonaList.AddNew: TPersona;
begin
  result := TPersona(InternalAddNew);
end;

procedure TPersonaList.Insert(index: Integer; NewObject: TPersona);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonaList.GetBoldObject(index: Integer): TPersona;
begin
  result := TPersona(GetElement(index));
end;

procedure TPersonaList.SetBoldObject(index: Integer; NewObject: TPersona);
begin;
  SetElement(index, NewObject);
end;

function TPersona.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  if (Member = M_Propiska) then result := _Propiska_DeriveAndSubscribe else
  result := inherited GetDeriveMethodForMember(Member);
end;

function TPersona.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

{ TPrihodn_dokument }

function TPrihodn_dokument._Get_M_Vsego_dohod_s_arendy: TBAFloat;
begin
  assert(ValidateMember('TPrihodn_dokument', 'Vsego_dohod_s_arendy', 0, TBAFloat));
  Result := TBAFloat(BoldMembers[0]);
end;

function TPrihodn_dokument._GetVsego_dohod_s_arendy: double;
begin
  Result := M_Vsego_dohod_s_arendy.AsFloat;
end;

procedure TPrihodn_dokumentList.Add(NewObject: TPrihodn_dokument);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPrihodn_dokumentList.IndexOf(anObject: TPrihodn_dokument): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPrihodn_dokumentList.Includes(anObject: TPrihodn_dokument) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPrihodn_dokumentList.AddNew: TPrihodn_dokument;
begin
  result := TPrihodn_dokument(InternalAddNew);
end;

procedure TPrihodn_dokumentList.Insert(index: Integer; NewObject: TPrihodn_dokument);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPrihodn_dokumentList.GetBoldObject(index: Integer): TPrihodn_dokument;
begin
  result := TPrihodn_dokument(GetElement(index));
end;

procedure TPrihodn_dokumentList.SetBoldObject(index: Integer; NewObject: TPrihodn_dokument);
begin;
  SetElement(index, NewObject);
end;

function TPrihodn_dokument.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  if (Member = M_Vsego_dohod_s_arendy) then result := _Vsego_dohod_s_arendy_DeriveAndSubscribe else
  result := inherited GetDeriveMethodForMember(Member);
end;

function TPrihodn_dokument.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

{ TProgivanie }

function TProgivanie._Get_M_Vyselen: TBABoolean;
begin
  assert(ValidateMember('TProgivanie', 'Vyselen', 0, TBABoolean));
  Result := TBABoolean(BoldMembers[0]);
end;

function TProgivanie._GetVyselen: Boolean;
begin
  Result := M_Vyselen.AsBoolean;
end;

procedure TProgivanie._SetVyselen(const NewValue: Boolean);
begin
  M_Vyselen.AsBoolean := NewValue;
end;

function TProgivanie._Get_M_Kolichestvo_dnei_progiv: TBAFloat;
begin
  assert(ValidateMember('TProgivanie', 'Kolichestvo_dnei_progiv', 1, TBAFloat));
  Result := TBAFloat(BoldMembers[1]);
end;

function TProgivanie._GetKolichestvo_dnei_progiv: double;
begin
  Result := M_Kolichestvo_dnei_progiv.AsFloat;
end;

procedure TProgivanie._SetKolichestvo_dnei_progiv(const NewValue: double);
begin
  M_Kolichestvo_dnei_progiv.AsFloat := NewValue;
end;

function TProgivanie._Get_M_Otdeljno: TBABoolean;
begin
  assert(ValidateMember('TProgivanie', 'Otdeljno', 2, TBABoolean));
  Result := TBABoolean(BoldMembers[2]);
end;

function TProgivanie._GetOtdeljno: Boolean;
begin
  Result := M_Otdeljno.AsBoolean;
end;

procedure TProgivanie._SetOtdeljno(const NewValue: Boolean);
begin
  M_Otdeljno.AsBoolean := NewValue;
end;

function TProgivanie._Get_M_Do_daty: TBADateTime;
begin
  assert(ValidateMember('TProgivanie', 'Do_daty', 3, TBADateTime));
  Result := TBADateTime(BoldMembers[3]);
end;

function TProgivanie._GetDo_daty: TDateTime;
begin
  Result := M_Do_daty.AsDateTime;
end;

procedure TProgivanie._SetDo_daty(const NewValue: TDateTime);
begin
  M_Do_daty.AsDateTime := NewValue;
end;

function TProgivanie._Get_M_S_daty: TBADateTime;
begin
  assert(ValidateMember('TProgivanie', 'S_daty', 4, TBADateTime));
  Result := TBADateTime(BoldMembers[4]);
end;

function TProgivanie._GetS_daty: TDateTime;
begin
  Result := M_S_daty.AsDateTime;
end;

procedure TProgivanie._SetS_daty(const NewValue: TDateTime);
begin
  M_S_daty.AsDateTime := NewValue;
end;

function TProgivanie._Get_M_Isp_otd_stoimostj: TBABoolean;
begin
  assert(ValidateMember('TProgivanie', 'Isp_otd_stoimostj', 5, TBABoolean));
  Result := TBABoolean(BoldMembers[5]);
end;

function TProgivanie._GetIsp_otd_stoimostj: Boolean;
begin
  Result := M_Isp_otd_stoimostj.AsBoolean;
end;

procedure TProgivanie._SetIsp_otd_stoimostj(const NewValue: Boolean);
begin
  M_Isp_otd_stoimostj.AsBoolean := NewValue;
end;

function TProgivanie._Get_M_Otdeljn_stoim: TBAFloat;
begin
  assert(ValidateMember('TProgivanie', 'Otdeljn_stoim', 6, TBAFloat));
  Result := TBAFloat(BoldMembers[6]);
end;

function TProgivanie._GetOtdeljn_stoim: double;
begin
  Result := M_Otdeljn_stoim.AsFloat;
end;

procedure TProgivanie._SetOtdeljn_stoim(const NewValue: double);
begin
  M_Otdeljn_stoim.AsFloat := NewValue;
end;

function TProgivanie._Get_M_Na_dop_meste: TBABoolean;
begin
  assert(ValidateMember('TProgivanie', 'Na_dop_meste', 7, TBABoolean));
  Result := TBABoolean(BoldMembers[7]);
end;

function TProgivanie._GetNa_dop_meste: Boolean;
begin
  Result := M_Na_dop_meste.AsBoolean;
end;

procedure TProgivanie._SetNa_dop_meste(const NewValue: Boolean);
begin
  M_Na_dop_meste.AsBoolean := NewValue;
end;

function TProgivanie._Get_M_Stoim_na_chel_vychisl: TBAFloat;
begin
  assert(ValidateMember('TProgivanie', 'Stoim_na_chel_vychisl', 8, TBAFloat));
  Result := TBAFloat(BoldMembers[8]);
end;

function TProgivanie._GetStoim_na_chel_vychisl: double;
begin
  Result := M_Stoim_na_chel_vychisl.AsFloat;
end;

function TProgivanie._Get_M_Summa: TBAFloat;
begin
  assert(ValidateMember('TProgivanie', 'Summa', 9, TBAFloat));
  Result := TBAFloat(BoldMembers[9]);
end;

function TProgivanie._GetSumma: double;
begin
  Result := M_Summa.AsFloat;
end;

function TProgivanie._Get_M_sovm_givyot_s: TBoldObjectReference;
begin
  assert(ValidateMember('TProgivanie', 'sovm_givyot_s', 10, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[10]);
end;

function TProgivanie._Getsovm_givyot_s: TProgivanie;
begin
  assert(not assigned(M_sovm_givyot_s.BoldObject) or (M_sovm_givyot_s.BoldObject is TProgivanie), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'sovm_givyot_s', M_sovm_givyot_s.BoldObject.ClassName, 'TProgivanie']));
  Result := TProgivanie(M_sovm_givyot_s.BoldObject);
end;

procedure TProgivanie._Setsovm_givyot_s(const value: TProgivanie);
begin
  M_sovm_givyot_s.BoldObject := value;
end;

function TProgivanie._Getotvech_za_progivanie: TProgivanieList;
begin
  assert(ValidateMember('TProgivanie', 'otvech_za_progivanie', 11, TProgivanieList));
  Result := TProgivanieList(BoldMembers[11]);
end;

function TProgivanie._GetOtd_chel_imeet_skidki: TDiscont_politikaList;
begin
  assert(ValidateMember('TProgivanie', 'Otd_chel_imeet_skidki', 12, TDiscont_politikaList));
  Result := TDiscont_politikaList(BoldMembers[12]);
end;

function TProgivanie._GetOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel: TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList;
begin
  assert(ValidateMember('TProgivanie', 'Otd_chel_imeet_skidkiSkidka_kak_prog_otd_chel', 13, TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList));
  Result := TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList(BoldMembers[13]);
end;

function TProgivanie._Getispoljz_obychn_skidki: TSkidkiList;
begin
  assert(ValidateMember('TProgivanie', 'ispoljz_obychn_skidki', 14, TSkidkiList));
  Result := TSkidkiList(BoldMembers[14]);
end;

function TProgivanie._Getispoljz_obychn_skidkinapryamuyu_ocenivaet: Tispoljz_obychn_skidkinapryamuyu_ocenivaetList;
begin
  assert(ValidateMember('TProgivanie', 'ispoljz_obychn_skidkinapryamuyu_ocenivaet', 15, Tispoljz_obychn_skidkinapryamuyu_ocenivaetList));
  Result := Tispoljz_obychn_skidkinapryamuyu_ocenivaetList(BoldMembers[15]);
end;

function TProgivanie._Get_M_Progivaet_soglasno: TBoldObjectReference;
begin
  assert(ValidateMember('TProgivanie', 'Progivaet_soglasno', 16, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[16]);
end;

function TProgivanie._GetProgivaet_soglasno: TList_klienta;
begin
  assert(not assigned(M_Progivaet_soglasno.BoldObject) or (M_Progivaet_soglasno.BoldObject is TList_klienta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Progivaet_soglasno', M_Progivaet_soglasno.BoldObject.ClassName, 'TList_klienta']));
  Result := TList_klienta(M_Progivaet_soglasno.BoldObject);
end;

function TProgivanie._Get_M_Opis_prog_klienta: TBoldObjectReference;
begin
  assert(ValidateMember('TProgivanie', 'Opis_prog_klienta', 17, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[17]);
end;

function TProgivanie._GetOpis_prog_klienta: TKlient;
begin
  assert(not assigned(M_Opis_prog_klienta.BoldObject) or (M_Opis_prog_klienta.BoldObject is TKlient), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Opis_prog_klienta', M_Opis_prog_klienta.BoldObject.ClassName, 'TKlient']));
  Result := TKlient(M_Opis_prog_klienta.BoldObject);
end;

procedure TProgivanieList.Add(NewObject: TProgivanie);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TProgivanieList.IndexOf(anObject: TProgivanie): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TProgivanieList.Includes(anObject: TProgivanie) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TProgivanieList.AddNew: TProgivanie;
begin
  result := TProgivanie(InternalAddNew);
end;

procedure TProgivanieList.Insert(index: Integer; NewObject: TProgivanie);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TProgivanieList.GetBoldObject(index: Integer): TProgivanie;
begin
  result := TProgivanie(GetElement(index));
end;

procedure TProgivanieList.SetBoldObject(index: Integer; NewObject: TProgivanie);
begin;
  SetElement(index, NewObject);
end;

{ TSpravochnik }

function TSpravochnik._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TSpravochnik', 'Naimenovanie', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TSpravochnik._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TSpravochnik._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TSpravochnik._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TSpravochnik', 'Kommentarii', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TSpravochnik._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TSpravochnik._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

procedure TSpravochnikList.Add(NewObject: TSpravochnik);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSpravochnikList.IndexOf(anObject: TSpravochnik): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSpravochnikList.Includes(anObject: TSpravochnik) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSpravochnikList.AddNew: TSpravochnik;
begin
  result := TSpravochnik(InternalAddNew);
end;

procedure TSpravochnikList.Insert(index: Integer; NewObject: TSpravochnik);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSpravochnikList.GetBoldObject(index: Integer): TSpravochnik;
begin
  result := TSpravochnik(GetElement(index));
end;

procedure TSpravochnikList.SetBoldObject(index: Integer; NewObject: TSpravochnik);
begin;
  SetElement(index, NewObject);
end;

{ TOrganizaciya }

function TOrganizaciya._Get_M_Strana: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Strana', 19, TBAString));
  Result := TBAString(BoldMembers[19]);
end;

function TOrganizaciya._GetStrana: String;
begin
  Result := M_Strana.AsString;
end;

procedure TOrganizaciya._SetStrana(const NewValue: String);
begin
  M_Strana.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Oblastj: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Oblastj', 20, TBAString));
  Result := TBAString(BoldMembers[20]);
end;

function TOrganizaciya._GetOblastj: String;
begin
  Result := M_Oblastj.AsString;
end;

procedure TOrganizaciya._SetOblastj(const NewValue: String);
begin
  M_Oblastj.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Gorod: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Gorod', 21, TBAString));
  Result := TBAString(BoldMembers[21]);
end;

function TOrganizaciya._GetGorod: String;
begin
  Result := M_Gorod.AsString;
end;

procedure TOrganizaciya._SetGorod(const NewValue: String);
begin
  M_Gorod.AsString := NewValue;
end;

function TOrganizaciya._Get_M_BIK: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'BIK', 22, TBAString));
  Result := TBAString(BoldMembers[22]);
end;

function TOrganizaciya._GetBIK: String;
begin
  Result := M_BIK.AsString;
end;

procedure TOrganizaciya._SetBIK(const NewValue: String);
begin
  M_BIK.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Naimenovanie', 23, TBAString));
  Result := TBAString(BoldMembers[23]);
end;

function TOrganizaciya._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TOrganizaciya._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TOrganizaciya._Get_M_YavlyaetsyaVlad: TBABoolean;
begin
  assert(ValidateMember('TOrganizaciya', 'YavlyaetsyaVlad', 24, TBABoolean));
  Result := TBABoolean(BoldMembers[24]);
end;

function TOrganizaciya._GetYavlyaetsyaVlad: Boolean;
begin
  Result := M_YavlyaetsyaVlad.AsBoolean;
end;

procedure TOrganizaciya._SetYavlyaetsyaVlad(const NewValue: Boolean);
begin
  M_YavlyaetsyaVlad.AsBoolean := NewValue;
end;

function TOrganizaciya._Get_M_Rukovoditelj: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Rukovoditelj', 25, TBAString));
  Result := TBAString(BoldMembers[25]);
end;

function TOrganizaciya._GetRukovoditelj: String;
begin
  Result := M_Rukovoditelj.AsString;
end;

procedure TOrganizaciya._SetRukovoditelj(const NewValue: String);
begin
  M_Rukovoditelj.AsString := NewValue;
end;

function TOrganizaciya._Get_M_GlBuhgalter: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'GlBuhgalter', 26, TBAString));
  Result := TBAString(BoldMembers[26]);
end;

function TOrganizaciya._GetGlBuhgalter: String;
begin
  Result := M_GlBuhgalter.AsString;
end;

procedure TOrganizaciya._SetGlBuhgalter(const NewValue: String);
begin
  M_GlBuhgalter.AsString := NewValue;
end;

function TOrganizaciya._Get_M_INN: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'INN', 27, TBAString));
  Result := TBAString(BoldMembers[27]);
end;

function TOrganizaciya._GetINN: String;
begin
  Result := M_INN.AsString;
end;

procedure TOrganizaciya._SetINN(const NewValue: String);
begin
  M_INN.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Rasch__schet: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Rasch__schet', 28, TBAString));
  Result := TBAString(BoldMembers[28]);
end;

function TOrganizaciya._GetRasch__schet: String;
begin
  Result := M_Rasch__schet.AsString;
end;

procedure TOrganizaciya._SetRasch__schet(const NewValue: String);
begin
  M_Rasch__schet.AsString := NewValue;
end;

function TOrganizaciya._Get_M_KPP: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'KPP', 29, TBAString));
  Result := TBAString(BoldMembers[29]);
end;

function TOrganizaciya._GetKPP: String;
begin
  Result := M_KPP.AsString;
end;

procedure TOrganizaciya._SetKPP(const NewValue: String);
begin
  M_KPP.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Tip_organizacii: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Tip_organizacii', 30, TBAString));
  Result := TBAString(BoldMembers[30]);
end;

function TOrganizaciya._GetTip_organizacii: String;
begin
  Result := M_Tip_organizacii.AsString;
end;

procedure TOrganizaciya._SetTip_organizacii(const NewValue: String);
begin
  M_Tip_organizacii.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Kor_schet: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Kor_schet', 31, TBAString));
  Result := TBAString(BoldMembers[31]);
end;

function TOrganizaciya._GetKor_schet: String;
begin
  Result := M_Kor_schet.AsString;
end;

procedure TOrganizaciya._SetKor_schet(const NewValue: String);
begin
  M_Kor_schet.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Naim__banka: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Naim__banka', 32, TBAString));
  Result := TBAString(BoldMembers[32]);
end;

function TOrganizaciya._GetNaim__banka: String;
begin
  Result := M_Naim__banka.AsString;
end;

procedure TOrganizaciya._SetNaim__banka(const NewValue: String);
begin
  M_Naim__banka.AsString := NewValue;
end;

procedure TOrganizaciyaList.Add(NewObject: TOrganizaciya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOrganizaciyaList.IndexOf(anObject: TOrganizaciya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOrganizaciyaList.Includes(anObject: TOrganizaciya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOrganizaciyaList.AddNew: TOrganizaciya;
begin
  result := TOrganizaciya(InternalAddNew);
end;

procedure TOrganizaciyaList.Insert(index: Integer; NewObject: TOrganizaciya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOrganizaciyaList.GetBoldObject(index: Integer): TOrganizaciya;
begin
  result := TOrganizaciya(GetElement(index));
end;

procedure TOrganizaciyaList.SetBoldObject(index: Integer; NewObject: TOrganizaciya);
begin;
  SetElement(index, NewObject);
end;

{ TPrihodnyi_order }

function TPrihodnyi_order._Get_M_Debet: TBAString;
begin
  assert(ValidateMember('TPrihodnyi_order', 'Debet', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TPrihodnyi_order._GetDebet: String;
begin
  Result := M_Debet.AsString;
end;

procedure TPrihodnyi_order._SetDebet(const NewValue: String);
begin
  M_Debet.AsString := NewValue;
end;

function TPrihodnyi_order._Get_M_Korrespondir_schyot: TBAString;
begin
  assert(ValidateMember('TPrihodnyi_order', 'Korrespondir_schyot', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TPrihodnyi_order._GetKorrespondir_schyot: String;
begin
  Result := M_Korrespondir_schyot.AsString;
end;

procedure TPrihodnyi_order._SetKorrespondir_schyot(const NewValue: String);
begin
  M_Korrespondir_schyot.AsString := NewValue;
end;

function TPrihodnyi_order._Get_M_Kod_analitich_uch: TBAString;
begin
  assert(ValidateMember('TPrihodnyi_order', 'Kod_analitich_uch', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TPrihodnyi_order._GetKod_analitich_uch: String;
begin
  Result := M_Kod_analitich_uch.AsString;
end;

procedure TPrihodnyi_order._SetKod_analitich_uch(const NewValue: String);
begin
  M_Kod_analitich_uch.AsString := NewValue;
end;

function TPrihodnyi_order._Get_M_Kod_celev_naznach: TBAString;
begin
  assert(ValidateMember('TPrihodnyi_order', 'Kod_celev_naznach', 4, TBAString));
  Result := TBAString(BoldMembers[4]);
end;

function TPrihodnyi_order._GetKod_celev_naznach: String;
begin
  Result := M_Kod_celev_naznach.AsString;
end;

procedure TPrihodnyi_order._SetKod_celev_naznach(const NewValue: String);
begin
  M_Kod_celev_naznach.AsString := NewValue;
end;

function TPrihodnyi_order._Get_M_Summa: TBAFloat;
begin
  assert(ValidateMember('TPrihodnyi_order', 'Summa', 5, TBAFloat));
  Result := TBAFloat(BoldMembers[5]);
end;

function TPrihodnyi_order._GetSumma: double;
begin
  Result := M_Summa.AsFloat;
end;

procedure TPrihodnyi_order._SetSumma(const NewValue: double);
begin
  M_Summa.AsFloat := NewValue;
end;

function TPrihodnyi_order._Get_M_Data_prihoda: TBADateTime;
begin
  assert(ValidateMember('TPrihodnyi_order', 'Data_prihoda', 6, TBADateTime));
  Result := TBADateTime(BoldMembers[6]);
end;

function TPrihodnyi_order._GetData_prihoda: TDateTime;
begin
  Result := M_Data_prihoda.AsDateTime;
end;

procedure TPrihodnyi_order._SetData_prihoda(const NewValue: TDateTime);
begin
  M_Data_prihoda.AsDateTime := NewValue;
end;

function TPrihodnyi_order._Get_M_Predvarit: TBABoolean;
begin
  assert(ValidateMember('TPrihodnyi_order', 'Predvarit', 7, TBABoolean));
  Result := TBABoolean(BoldMembers[7]);
end;

function TPrihodnyi_order._GetPredvarit: Boolean;
begin
  Result := M_Predvarit.AsBoolean;
end;

procedure TPrihodnyi_order._SetPredvarit(const NewValue: Boolean);
begin
  M_Predvarit.AsBoolean := NewValue;
end;

function TPrihodnyi_order._Get_M_fiksiruet_oplatu_dlya: TBoldObjectReference;
begin
  assert(ValidateMember('TPrihodnyi_order', 'fiksiruet_oplatu_dlya', 8, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[8]);
end;

function TPrihodnyi_order._Getfiksiruet_oplatu_dlya: TList_klienta;
begin
  assert(not assigned(M_fiksiruet_oplatu_dlya.BoldObject) or (M_fiksiruet_oplatu_dlya.BoldObject is TList_klienta), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'fiksiruet_oplatu_dlya', M_fiksiruet_oplatu_dlya.BoldObject.ClassName, 'TList_klienta']));
  Result := TList_klienta(M_fiksiruet_oplatu_dlya.BoldObject);
end;

procedure TPrihodnyi_order._Setfiksiruet_oplatu_dlya(const value: TList_klienta);
begin
  M_fiksiruet_oplatu_dlya.BoldObject := value;
end;

function TPrihodnyi_order._Get_M_opis_prihod_po: TBoldObjectReference;
begin
  assert(ValidateMember('TPrihodnyi_order', 'opis_prihod_po', 9, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[9]);
end;

function TPrihodnyi_order._Getopis_prihod_po: TOtelj;
begin
  assert(not assigned(M_opis_prihod_po.BoldObject) or (M_opis_prihod_po.BoldObject is TOtelj), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'opis_prihod_po', M_opis_prihod_po.BoldObject.ClassName, 'TOtelj']));
  Result := TOtelj(M_opis_prihod_po.BoldObject);
end;

procedure TPrihodnyi_order._Setopis_prihod_po(const value: TOtelj);
begin
  M_opis_prihod_po.BoldObject := value;
end;

procedure TPrihodnyi_orderList.Add(NewObject: TPrihodnyi_order);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPrihodnyi_orderList.IndexOf(anObject: TPrihodnyi_order): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPrihodnyi_orderList.Includes(anObject: TPrihodnyi_order) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPrihodnyi_orderList.AddNew: TPrihodnyi_order;
begin
  result := TPrihodnyi_order(InternalAddNew);
end;

procedure TPrihodnyi_orderList.Insert(index: Integer; NewObject: TPrihodnyi_order);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPrihodnyi_orderList.GetBoldObject(index: Integer): TPrihodnyi_order;
begin
  result := TPrihodnyi_order(GetElement(index));
end;

procedure TPrihodnyi_orderList.SetBoldObject(index: Integer; NewObject: TPrihodnyi_order);
begin;
  SetElement(index, NewObject);
end;

{ TDiscont_politika }

function TDiscont_politika._Get_M_Ot_cen_politiki: TBABoolean;
begin
  assert(ValidateMember('TDiscont_politika', 'Ot_cen_politiki', 2, TBABoolean));
  Result := TBABoolean(BoldMembers[2]);
end;

function TDiscont_politika._GetOt_cen_politiki: Boolean;
begin
  Result := M_Ot_cen_politiki.AsBoolean;
end;

function TDiscont_politika._Get_M_Ot_klassa_nomerov: TBABoolean;
begin
  assert(ValidateMember('TDiscont_politika', 'Ot_klassa_nomerov', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TDiscont_politika._GetOt_klassa_nomerov: Boolean;
begin
  Result := M_Ot_klassa_nomerov.AsBoolean;
end;

function TDiscont_politika._Get_M_Ot_nomera: TBABoolean;
begin
  assert(ValidateMember('TDiscont_politika', 'Ot_nomera', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TDiscont_politika._GetOt_nomera: Boolean;
begin
  Result := M_Ot_nomera.AsBoolean;
end;

function TDiscont_politika._Get_M_Cena: TBAFloat;
begin
  assert(ValidateMember('TDiscont_politika', 'Cena', 5, TBAFloat));
  Result := TBAFloat(BoldMembers[5]);
end;

function TDiscont_politika._GetCena: double;
begin
  Result := M_Cena.AsFloat;
end;

function TDiscont_politika._Get_M_S_daty: TBADate;
begin
  assert(ValidateMember('TDiscont_politika', 'S_daty', 6, TBADate));
  Result := TBADate(BoldMembers[6]);
end;

function TDiscont_politika._GetS_daty: TDate;
begin
  Result := M_S_daty.AsDate;
end;

procedure TDiscont_politika._SetS_daty(const NewValue: TDate);
begin
  M_S_daty.AsDate := NewValue;
end;

function TDiscont_politika._Get_M_Dni: TBAInteger;
begin
  assert(ValidateMember('TDiscont_politika', 'Dni', 7, TBAInteger));
  Result := TBAInteger(BoldMembers[7]);
end;

function TDiscont_politika._GetDni: Integer;
begin
  Result := M_Dni.AsInteger;
end;

procedure TDiscont_politika._SetDni(const NewValue: Integer);
begin
  M_Dni.AsInteger := NewValue;
end;

function TDiscont_politika._GetPredost_diskont_v: TList_klientaList;
begin
  assert(ValidateMember('TDiscont_politika', 'Predost_diskont_v', 8, TList_klientaList));
  Result := TList_klientaList(BoldMembers[8]);
end;

function TDiscont_politika._GetLinkPredost_diskont_vPredost_diskont: TLinkPredost_diskont_vPredost_diskontList;
begin
  assert(ValidateMember('TDiscont_politika', 'LinkPredost_diskont_vPredost_diskont', 9, TLinkPredost_diskont_vPredost_diskontList));
  Result := TLinkPredost_diskont_vPredost_diskontList(BoldMembers[9]);
end;

function TDiscont_politika._GetSkidka_kak_prog_otd_chel: TProgivanieList;
begin
  assert(ValidateMember('TDiscont_politika', 'Skidka_kak_prog_otd_chel', 10, TProgivanieList));
  Result := TProgivanieList(BoldMembers[10]);
end;

function TDiscont_politika._GetOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel: TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList;
begin
  assert(ValidateMember('TDiscont_politika', 'Otd_chel_imeet_skidkiSkidka_kak_prog_otd_chel', 11, TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList));
  Result := TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList(BoldMembers[11]);
end;

function TDiscont_politika._GetRasschit_cherez: TSkidkiList;
begin
  assert(ValidateMember('TDiscont_politika', 'Rasschit_cherez', 12, TSkidkiList));
  Result := TSkidkiList(BoldMembers[12]);
end;

procedure TDiscont_politikaList.Add(NewObject: TDiscont_politika);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TDiscont_politikaList.IndexOf(anObject: TDiscont_politika): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TDiscont_politikaList.Includes(anObject: TDiscont_politika) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TDiscont_politikaList.AddNew: TDiscont_politika;
begin
  result := TDiscont_politika(InternalAddNew);
end;

procedure TDiscont_politikaList.Insert(index: Integer; NewObject: TDiscont_politika);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TDiscont_politikaList.GetBoldObject(index: Integer): TDiscont_politika;
begin
  result := TDiscont_politika(GetElement(index));
end;

procedure TDiscont_politikaList.SetBoldObject(index: Integer; NewObject: TDiscont_politika);
begin;
  SetElement(index, NewObject);
end;

function TDiscont_politika.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  if (Member = M_Ot_cen_politiki) then result := _Ot_cen_politiki_DeriveAndSubscribe else
  if (Member = M_Ot_klassa_nomerov) then result := _Ot_klassa_nomerov_DeriveAndSubscribe else
  if (Member = M_Ot_nomera) then result := _Ot_nomera_DeriveAndSubscribe else
  if (Member = M_Cena) then result := _Cena_DeriveAndSubscribe else
  result := inherited GetDeriveMethodForMember(Member);
end;

function TDiscont_politika.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

{ TDolgnostj }

function TDolgnostj._Getopr_dolgnostj_dlya: TPersonalList;
begin
  assert(ValidateMember('TDolgnostj', 'opr_dolgnostj_dlya', 2, TPersonalList));
  Result := TPersonalList(BoldMembers[2]);
end;

procedure TDolgnostjList.Add(NewObject: TDolgnostj);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TDolgnostjList.IndexOf(anObject: TDolgnostj): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TDolgnostjList.Includes(anObject: TDolgnostj) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TDolgnostjList.AddNew: TDolgnostj;
begin
  result := TDolgnostj(InternalAddNew);
end;

procedure TDolgnostjList.Insert(index: Integer; NewObject: TDolgnostj);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TDolgnostjList.GetBoldObject(index: Integer): TDolgnostj;
begin
  result := TDolgnostj(GetElement(index));
end;

procedure TDolgnostjList.SetBoldObject(index: Integer; NewObject: TDolgnostj);
begin;
  SetElement(index, NewObject);
end;

{ TKlass_nomera }

function TKlass_nomera._Get_M_Bazovaya_cena: TBAFloat;
begin
  assert(ValidateMember('TKlass_nomera', 'Bazovaya_cena', 2, TBAFloat));
  Result := TBAFloat(BoldMembers[2]);
end;

function TKlass_nomera._GetBazovaya_cena: double;
begin
  Result := M_Bazovaya_cena.AsFloat;
end;

procedure TKlass_nomera._SetBazovaya_cena(const NewValue: double);
begin
  M_Bazovaya_cena.AsFloat := NewValue;
end;

function TKlass_nomera._Get_M_Kompleksnaya_cena: TBAFloat;
begin
  assert(ValidateMember('TKlass_nomera', 'Kompleksnaya_cena', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TKlass_nomera._GetKompleksnaya_cena: double;
begin
  Result := M_Kompleksnaya_cena.AsFloat;
end;

function TKlass_nomera._Get_M_Komnata_ogid: TBABoolean;
begin
  assert(ValidateMember('TKlass_nomera', 'Komnata_ogid', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TKlass_nomera._GetKomnata_ogid: Boolean;
begin
  Result := M_Komnata_ogid.AsBoolean;
end;

procedure TKlass_nomera._SetKomnata_ogid(const NewValue: Boolean);
begin
  M_Komnata_ogid.AsBoolean := NewValue;
end;

function TKlass_nomera._Get_M_Cvet_fona_klassa: TBAString;
begin
  assert(ValidateMember('TKlass_nomera', 'Cvet_fona_klassa', 5, TBAString));
  Result := TBAString(BoldMembers[5]);
end;

function TKlass_nomera._GetCvet_fona_klassa: String;
begin
  Result := M_Cvet_fona_klassa.AsString;
end;

procedure TKlass_nomera._SetCvet_fona_klassa(const NewValue: String);
begin
  M_Cvet_fona_klassa.AsString := NewValue;
end;

function TKlass_nomera._Get_M_Cvet_teksta_klassa: TBAString;
begin
  assert(ValidateMember('TKlass_nomera', 'Cvet_teksta_klassa', 6, TBAString));
  Result := TBAString(BoldMembers[6]);
end;

function TKlass_nomera._GetCvet_teksta_klassa: String;
begin
  Result := M_Cvet_teksta_klassa.AsString;
end;

procedure TKlass_nomera._SetCvet_teksta_klassa(const NewValue: String);
begin
  M_Cvet_teksta_klassa.AsString := NewValue;
end;

function TKlass_nomera._Get_M_Zarabotano_za_period: TBAFloat;
begin
  assert(ValidateMember('TKlass_nomera', 'Zarabotano_za_period', 7, TBAFloat));
  Result := TBAFloat(BoldMembers[7]);
end;

function TKlass_nomera._GetZarabotano_za_period: double;
begin
  Result := M_Zarabotano_za_period.AsFloat;
end;

function TKlass_nomera._Get_M_Identifikator_otelya: TBAInteger;
begin
  assert(ValidateMember('TKlass_nomera', 'Identifikator_otelya', 8, TBAInteger));
  Result := TBAInteger(BoldMembers[8]);
end;

function TKlass_nomera._GetIdentifikator_otelya: Integer;
begin
  Result := M_Identifikator_otelya.AsInteger;
end;

function TKlass_nomera._Get_M_Nachalo_intervala: TBADateTime;
begin
  assert(ValidateMember('TKlass_nomera', 'Nachalo_intervala', 9, TBADateTime));
  Result := TBADateTime(BoldMembers[9]);
end;

function TKlass_nomera._GetNachalo_intervala: TDateTime;
begin
  Result := M_Nachalo_intervala.AsDateTime;
end;

function TKlass_nomera._Get_M_Konec_intervala: TBADateTime;
begin
  assert(ValidateMember('TKlass_nomera', 'Konec_intervala', 10, TBADateTime));
  Result := TBADateTime(BoldMembers[10]);
end;

function TKlass_nomera._GetKonec_intervala: TDateTime;
begin
  Result := M_Konec_intervala.AsDateTime;
end;

function TKlass_nomera._Get_M_Vych_za_sezon: TBABoolean;
begin
  assert(ValidateMember('TKlass_nomera', 'Vych_za_sezon', 11, TBABoolean));
  Result := TBABoolean(BoldMembers[11]);
end;

function TKlass_nomera._GetVych_za_sezon: Boolean;
begin
  Result := M_Vych_za_sezon.AsBoolean;
end;

function TKlass_nomera._Get_M_Tek_vremya: TBADateTime;
begin
  assert(ValidateMember('TKlass_nomera', 'Tek_vremya', 12, TBADateTime));
  Result := TBADateTime(BoldMembers[12]);
end;

function TKlass_nomera._GetTek_vremya: TDateTime;
begin
  Result := M_Tek_vremya.AsDateTime;
end;

function TKlass_nomera._Get_M_Ispoljz_opcii: TBABoolean;
begin
  assert(ValidateMember('TKlass_nomera', 'Ispoljz_opcii', 13, TBABoolean));
  Result := TBABoolean(BoldMembers[13]);
end;

function TKlass_nomera._GetIspoljz_opcii: Boolean;
begin
  Result := M_Ispoljz_opcii.AsBoolean;
end;

procedure TKlass_nomera._SetIspoljz_opcii(const NewValue: Boolean);
begin
  M_Ispoljz_opcii.AsBoolean := NewValue;
end;

function TKlass_nomera._Get_M_Uchit_cenov_politiku: TBABoolean;
begin
  assert(ValidateMember('TKlass_nomera', 'Uchit_cenov_politiku', 14, TBABoolean));
  Result := TBABoolean(BoldMembers[14]);
end;

function TKlass_nomera._GetUchit_cenov_politiku: Boolean;
begin
  Result := M_Uchit_cenov_politiku.AsBoolean;
end;

procedure TKlass_nomera._SetUchit_cenov_politiku(const NewValue: Boolean);
begin
  M_Uchit_cenov_politiku.AsBoolean := NewValue;
end;

function TKlass_nomera._Get_M_Stoim_na_chel_v_sutki: TBAFloat;
begin
  assert(ValidateMember('TKlass_nomera', 'Stoim_na_chel_v_sutki', 15, TBAFloat));
  Result := TBAFloat(BoldMembers[15]);
end;

function TKlass_nomera._GetStoim_na_chel_v_sutki: double;
begin
  Result := M_Stoim_na_chel_v_sutki.AsFloat;
end;

procedure TKlass_nomera._SetStoim_na_chel_v_sutki(const NewValue: double);
begin
  M_Stoim_na_chel_v_sutki.AsFloat := NewValue;
end;

function TKlass_nomera._Get_M_calcprice: TBAFloat;
begin
  assert(ValidateMember('TKlass_nomera', 'calcprice', 16, TBAFloat));
  Result := TBAFloat(BoldMembers[16]);
end;

function TKlass_nomera._Getcalcprice: double;
begin
  Result := M_calcprice.AsFloat;
end;

function TKlass_nomera._Get_M_Chel_v_nomere: TBAInteger;
begin
  assert(ValidateMember('TKlass_nomera', 'Chel_v_nomere', 17, TBAInteger));
  Result := TBAInteger(BoldMembers[17]);
end;

function TKlass_nomera._GetChel_v_nomere: Integer;
begin
  Result := M_Chel_v_nomere.AsInteger;
end;

procedure TKlass_nomera._SetChel_v_nomere(const NewValue: Integer);
begin
  M_Chel_v_nomere.AsInteger := NewValue;
end;

function TKlass_nomera._Get_M_Maks_chelovek: TBAInteger;
begin
  assert(ValidateMember('TKlass_nomera', 'Maks_chelovek', 18, TBAInteger));
  Result := TBAInteger(BoldMembers[18]);
end;

function TKlass_nomera._GetMaks_chelovek: Integer;
begin
  Result := M_Maks_chelovek.AsInteger;
end;

procedure TKlass_nomera._SetMaks_chelovek(const NewValue: Integer);
begin
  M_Maks_chelovek.AsInteger := NewValue;
end;

function TKlass_nomera._Get_M_Kol_dop_mest: TBAInteger;
begin
  assert(ValidateMember('TKlass_nomera', 'Kol_dop_mest', 19, TBAInteger));
  Result := TBAInteger(BoldMembers[19]);
end;

function TKlass_nomera._GetKol_dop_mest: Integer;
begin
  Result := M_Kol_dop_mest.AsInteger;
end;

procedure TKlass_nomera._SetKol_dop_mest(const NewValue: Integer);
begin
  M_Kol_dop_mest.AsInteger := NewValue;
end;

function TKlass_nomera._Get_M_Stoim_na_chel_vychisl: TBAFloat;
begin
  assert(ValidateMember('TKlass_nomera', 'Stoim_na_chel_vychisl', 20, TBAFloat));
  Result := TBAFloat(BoldMembers[20]);
end;

function TKlass_nomera._GetStoim_na_chel_vychisl: double;
begin
  Result := M_Stoim_na_chel_vychisl.AsFloat;
end;

function TKlass_nomera._GetVklyuchaet_opcii: TOpciiya_urovnyaList;
begin
  assert(ValidateMember('TKlass_nomera', 'Vklyuchaet_opcii', 21, TOpciiya_urovnyaList));
  Result := TOpciiya_urovnyaList(BoldMembers[21]);
end;

function TKlass_nomera._GetOpredelyaet_urovenj: TNomer_arendyList;
begin
  assert(ValidateMember('TKlass_nomera', 'Opredelyaet_urovenj', 22, TNomer_arendyList));
  Result := TNomer_arendyList(BoldMembers[22]);
end;

function TKlass_nomera._GetImeet_bazovuyu_stoimostj: TCenovaya_politikaList;
begin
  assert(ValidateMember('TKlass_nomera', 'Imeet_bazovuyu_stoimostj', 23, TCenovaya_politikaList));
  Result := TCenovaya_politikaList(BoldMembers[23]);
end;

function TKlass_nomera._Get_M_klass_ispoljz_nastr: TBoldObjectReference;
begin
  assert(ValidateMember('TKlass_nomera', 'klass_ispoljz_nastr', 24, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[24]);
end;

function TKlass_nomera._Getklass_ispoljz_nastr: TNastroiki;
begin
  assert(not assigned(M_klass_ispoljz_nastr.BoldObject) or (M_klass_ispoljz_nastr.BoldObject is TNastroiki), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'klass_ispoljz_nastr', M_klass_ispoljz_nastr.BoldObject.ClassName, 'TNastroiki']));
  Result := TNastroiki(M_klass_ispoljz_nastr.BoldObject);
end;

procedure TKlass_nomera._Setklass_ispoljz_nastr(const value: TNastroiki);
begin
  M_klass_ispoljz_nastr.BoldObject := value;
end;

procedure TKlass_nomeraList.Add(NewObject: TKlass_nomera);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TKlass_nomeraList.IndexOf(anObject: TKlass_nomera): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TKlass_nomeraList.Includes(anObject: TKlass_nomera) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TKlass_nomeraList.AddNew: TKlass_nomera;
begin
  result := TKlass_nomera(InternalAddNew);
end;

procedure TKlass_nomeraList.Insert(index: Integer; NewObject: TKlass_nomera);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TKlass_nomeraList.GetBoldObject(index: Integer): TKlass_nomera;
begin
  result := TKlass_nomera(GetElement(index));
end;

procedure TKlass_nomeraList.SetBoldObject(index: Integer; NewObject: TKlass_nomera);
begin;
  SetElement(index, NewObject);
end;

function TKlass_nomera.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  if (Member = M_Stoim_na_chel_vychisl) then result := _Stoim_na_chel_vychisl_DeriveAndSubscribe else
  result := inherited GetDeriveMethodForMember(Member);
end;

function TKlass_nomera.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

{ TKorpus }

function TKorpus._Getvmeshaet_nomera: TNomer_arendyList;
begin
  assert(ValidateMember('TKorpus', 'vmeshaet_nomera', 2, TNomer_arendyList));
  Result := TNomer_arendyList(BoldMembers[2]);
end;

function TKorpus._Get_M_yavl_chastjyu_otelya: TBoldObjectReference;
begin
  assert(ValidateMember('TKorpus', 'yavl_chastjyu_otelya', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TKorpus._Getyavl_chastjyu_otelya: TOtelj;
begin
  assert(not assigned(M_yavl_chastjyu_otelya.BoldObject) or (M_yavl_chastjyu_otelya.BoldObject is TOtelj), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'yavl_chastjyu_otelya', M_yavl_chastjyu_otelya.BoldObject.ClassName, 'TOtelj']));
  Result := TOtelj(M_yavl_chastjyu_otelya.BoldObject);
end;

procedure TKorpus._Setyavl_chastjyu_otelya(const value: TOtelj);
begin
  M_yavl_chastjyu_otelya.BoldObject := value;
end;

procedure TKorpusList.Add(NewObject: TKorpus);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TKorpusList.IndexOf(anObject: TKorpus): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TKorpusList.Includes(anObject: TKorpus) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TKorpusList.AddNew: TKorpus;
begin
  result := TKorpus(InternalAddNew);
end;

procedure TKorpusList.Insert(index: Integer; NewObject: TKorpus);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TKorpusList.GetBoldObject(index: Integer): TKorpus;
begin
  result := TKorpus(GetElement(index));
end;

procedure TKorpusList.SetBoldObject(index: Integer; NewObject: TKorpus);
begin;
  SetElement(index, NewObject);
end;

{ TOpciiya_urovnya }

function TOpciiya_urovnya._Get_M_Nadbavka_po_cene: TBAFloat;
begin
  assert(ValidateMember('TOpciiya_urovnya', 'Nadbavka_po_cene', 2, TBAFloat));
  Result := TBAFloat(BoldMembers[2]);
end;

function TOpciiya_urovnya._GetNadbavka_po_cene: double;
begin
  Result := M_Nadbavka_po_cene.AsFloat;
end;

procedure TOpciiya_urovnya._SetNadbavka_po_cene(const NewValue: double);
begin
  M_Nadbavka_po_cene.AsFloat := NewValue;
end;

function TOpciiya_urovnya._Get_M_Koefficient: TBAFloat;
begin
  assert(ValidateMember('TOpciiya_urovnya', 'Koefficient', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TOpciiya_urovnya._GetKoefficient: double;
begin
  Result := M_Koefficient.AsFloat;
end;

procedure TOpciiya_urovnya._SetKoefficient(const NewValue: double);
begin
  M_Koefficient.AsFloat := NewValue;
end;

function TOpciiya_urovnya._Get_M_addprice: TBAFloat;
begin
  assert(ValidateMember('TOpciiya_urovnya', 'addprice', 4, TBAFloat));
  Result := TBAFloat(BoldMembers[4]);
end;

function TOpciiya_urovnya._Getaddprice: double;
begin
  Result := M_addprice.AsFloat;
end;

function TOpciiya_urovnya._Get_M_Vklyuchaetsya_v_klassah: TBoldObjectReference;
begin
  assert(ValidateMember('TOpciiya_urovnya', 'Vklyuchaetsya_v_klassah', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TOpciiya_urovnya._GetVklyuchaetsya_v_klassah: TKlass_nomera;
begin
  assert(not assigned(M_Vklyuchaetsya_v_klassah.BoldObject) or (M_Vklyuchaetsya_v_klassah.BoldObject is TKlass_nomera), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Vklyuchaetsya_v_klassah', M_Vklyuchaetsya_v_klassah.BoldObject.ClassName, 'TKlass_nomera']));
  Result := TKlass_nomera(M_Vklyuchaetsya_v_klassah.BoldObject);
end;

procedure TOpciiya_urovnya._SetVklyuchaetsya_v_klassah(const value: TKlass_nomera);
begin
  M_Vklyuchaetsya_v_klassah.BoldObject := value;
end;

procedure TOpciiya_urovnyaList.Add(NewObject: TOpciiya_urovnya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOpciiya_urovnyaList.IndexOf(anObject: TOpciiya_urovnya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOpciiya_urovnyaList.Includes(anObject: TOpciiya_urovnya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOpciiya_urovnyaList.AddNew: TOpciiya_urovnya;
begin
  result := TOpciiya_urovnya(InternalAddNew);
end;

procedure TOpciiya_urovnyaList.Insert(index: Integer; NewObject: TOpciiya_urovnya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOpciiya_urovnyaList.GetBoldObject(index: Integer): TOpciiya_urovnya;
begin
  result := TOpciiya_urovnya(GetElement(index));
end;

procedure TOpciiya_urovnyaList.SetBoldObject(index: Integer; NewObject: TOpciiya_urovnya);
begin;
  SetElement(index, NewObject);
end;

{ TOtelj }

function TOtelj._Get_M_Zarabotano_za_period: TBAFloat;
begin
  assert(ValidateMember('TOtelj', 'Zarabotano_za_period', 2, TBAFloat));
  Result := TBAFloat(BoldMembers[2]);
end;

function TOtelj._GetZarabotano_za_period: double;
begin
  Result := M_Zarabotano_za_period.AsFloat;
end;

function TOtelj._Get_M_Rashod_za_period: TBAFloat;
begin
  assert(ValidateMember('TOtelj', 'Rashod_za_period', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TOtelj._GetRashod_za_period: double;
begin
  Result := M_Rashod_za_period.AsFloat;
end;

function TOtelj._Get_M_Balans: TBAFloat;
begin
  assert(ValidateMember('TOtelj', 'Balans', 4, TBAFloat));
  Result := TBAFloat(BoldMembers[4]);
end;

function TOtelj._GetBalans: double;
begin
  Result := M_Balans.AsFloat;
end;

function TOtelj._Get_M_Identifikator_otelya: TBAInteger;
begin
  assert(ValidateMember('TOtelj', 'Identifikator_otelya', 5, TBAInteger));
  Result := TBAInteger(BoldMembers[5]);
end;

function TOtelj._GetIdentifikator_otelya: Integer;
begin
  Result := M_Identifikator_otelya.AsInteger;
end;

procedure TOtelj._SetIdentifikator_otelya(const NewValue: Integer);
begin
  M_Identifikator_otelya.AsInteger := NewValue;
end;

function TOtelj._Get_M_Prihod_za_period: TBAFloat;
begin
  assert(ValidateMember('TOtelj', 'Prihod_za_period', 6, TBAFloat));
  Result := TBAFloat(BoldMembers[6]);
end;

function TOtelj._GetPrihod_za_period: double;
begin
  Result := M_Prihod_za_period.AsFloat;
end;

function TOtelj._Get_M_Nachalo_intervala: TBADateTime;
begin
  assert(ValidateMember('TOtelj', 'Nachalo_intervala', 7, TBADateTime));
  Result := TBADateTime(BoldMembers[7]);
end;

function TOtelj._GetNachalo_intervala: TDateTime;
begin
  Result := M_Nachalo_intervala.AsDateTime;
end;

function TOtelj._Get_M_Konec_intervala: TBADateTime;
begin
  assert(ValidateMember('TOtelj', 'Konec_intervala', 8, TBADateTime));
  Result := TBADateTime(BoldMembers[8]);
end;

function TOtelj._GetKonec_intervala: TDateTime;
begin
  Result := M_Konec_intervala.AsDateTime;
end;

function TOtelj._Get_M_Vych_za_sezon: TBABoolean;
begin
  assert(ValidateMember('TOtelj', 'Vych_za_sezon', 9, TBABoolean));
  Result := TBABoolean(BoldMembers[9]);
end;

function TOtelj._GetVych_za_sezon: Boolean;
begin
  Result := M_Vych_za_sezon.AsBoolean;
end;

function TOtelj._Get_M_Vsego_prihod: TBAFloat;
begin
  assert(ValidateMember('TOtelj', 'Vsego_prihod', 10, TBAFloat));
  Result := TBAFloat(BoldMembers[10]);
end;

function TOtelj._GetVsego_prihod: double;
begin
  Result := M_Vsego_prihod.AsFloat;
end;

function TOtelj._Get_M_Vsego_rashod: TBAFloat;
begin
  assert(ValidateMember('TOtelj', 'Vsego_rashod', 11, TBAFloat));
  Result := TBAFloat(BoldMembers[11]);
end;

function TOtelj._GetVsego_rashod: double;
begin
  Result := M_Vsego_rashod.AsFloat;
end;

function TOtelj._Get_M_Balans_period: TBAFloat;
begin
  assert(ValidateMember('TOtelj', 'Balans_period', 12, TBAFloat));
  Result := TBAFloat(BoldMembers[12]);
end;

function TOtelj._GetBalans_period: double;
begin
  Result := M_Balans_period.AsFloat;
end;

function TOtelj._Getimeet_nomera: TNomer_arendyList;
begin
  assert(ValidateMember('TOtelj', 'imeet_nomera', 13, TNomer_arendyList));
  Result := TNomer_arendyList(BoldMembers[13]);
end;

function TOtelj._Getimeet_stroki_rashoda: TRash_dokumentList;
begin
  assert(ValidateMember('TOtelj', 'imeet_stroki_rashoda', 14, TRash_dokumentList));
  Result := TRash_dokumentList(BoldMembers[14]);
end;

function TOtelj._Getimet_stroki_prihoda: TPrihodnyi_orderList;
begin
  assert(ValidateMember('TOtelj', 'imet_stroki_prihoda', 15, TPrihodnyi_orderList));
  Result := TPrihodnyi_orderList(BoldMembers[15]);
end;

function TOtelj._Getimeet_korpusa: TKorpusList;
begin
  assert(ValidateMember('TOtelj', 'imeet_korpusa', 16, TKorpusList));
  Result := TKorpusList(BoldMembers[16]);
end;

procedure TOteljList.Add(NewObject: TOtelj);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOteljList.IndexOf(anObject: TOtelj): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOteljList.Includes(anObject: TOtelj) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOteljList.AddNew: TOtelj;
begin
  result := TOtelj(InternalAddNew);
end;

procedure TOteljList.Insert(index: Integer; NewObject: TOtelj);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOteljList.GetBoldObject(index: Integer): TOtelj;
begin
  result := TOtelj(GetElement(index));
end;

procedure TOteljList.SetBoldObject(index: Integer; NewObject: TOtelj);
begin;
  SetElement(index, NewObject);
end;

{ TRash_dokument }

function TRash_dokument._Get_M_Summa: TBAFloat;
begin
  assert(ValidateMember('TRash_dokument', 'Summa', 2, TBAFloat));
  Result := TBAFloat(BoldMembers[2]);
end;

function TRash_dokument._GetSumma: double;
begin
  Result := M_Summa.AsFloat;
end;

procedure TRash_dokument._SetSumma(const NewValue: double);
begin
  M_Summa.AsFloat := NewValue;
end;

function TRash_dokument._Get_M_Procent_otchisl_ot_oplaty: TBAFloat;
begin
  assert(ValidateMember('TRash_dokument', 'Procent_otchisl_ot_oplaty', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TRash_dokument._GetProcent_otchisl_ot_oplaty: double;
begin
  Result := M_Procent_otchisl_ot_oplaty.AsFloat;
end;

procedure TRash_dokument._SetProcent_otchisl_ot_oplaty(const NewValue: double);
begin
  M_Procent_otchisl_ot_oplaty.AsFloat := NewValue;
end;

function TRash_dokument._Get_M_Yavl_rash_dostavshiku: TBABoolean;
begin
  assert(ValidateMember('TRash_dokument', 'Yavl_rash_dostavshiku', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TRash_dokument._GetYavl_rash_dostavshiku: Boolean;
begin
  Result := M_Yavl_rash_dostavshiku.AsBoolean;
end;

procedure TRash_dokument._SetYavl_rash_dostavshiku(const NewValue: Boolean);
begin
  M_Yavl_rash_dostavshiku.AsBoolean := NewValue;
end;

function TRash_dokument._Get_M_Data_rashoda: TBADateTime;
begin
  assert(ValidateMember('TRash_dokument', 'Data_rashoda', 5, TBADateTime));
  Result := TBADateTime(BoldMembers[5]);
end;

function TRash_dokument._GetData_rashoda: TDateTime;
begin
  Result := M_Data_rashoda.AsDateTime;
end;

procedure TRash_dokument._SetData_rashoda(const NewValue: TDateTime);
begin
  M_Data_rashoda.AsDateTime := NewValue;
end;

function TRash_dokument._Get_M_Summa_dostavki: TBAFloat;
begin
  assert(ValidateMember('TRash_dokument', 'Summa_dostavki', 6, TBAFloat));
  Result := TBAFloat(BoldMembers[6]);
end;

function TRash_dokument._GetSumma_dostavki: double;
begin
  Result := M_Summa_dostavki.AsFloat;
end;

function TRash_dokument._Get_M_Summa_rashoda: TBAFloat;
begin
  assert(ValidateMember('TRash_dokument', 'Summa_rashoda', 7, TBAFloat));
  Result := TBAFloat(BoldMembers[7]);
end;

function TRash_dokument._GetSumma_rashoda: double;
begin
  Result := M_Summa_rashoda.AsFloat;
end;

function TRash_dokument._Get_M_opis_rashod_po: TBoldObjectReference;
begin
  assert(ValidateMember('TRash_dokument', 'opis_rashod_po', 8, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[8]);
end;

function TRash_dokument._Getopis_rashod_po: TOtelj;
begin
  assert(not assigned(M_opis_rashod_po.BoldObject) or (M_opis_rashod_po.BoldObject is TOtelj), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'opis_rashod_po', M_opis_rashod_po.BoldObject.ClassName, 'TOtelj']));
  Result := TOtelj(M_opis_rashod_po.BoldObject);
end;

procedure TRash_dokument._Setopis_rashod_po(const value: TOtelj);
begin
  M_opis_rashod_po.BoldObject := value;
end;

function TRash_dokument._Get_M_oforml_pri: TBoldObjectReference;
begin
  assert(ValidateMember('TRash_dokument', 'oforml_pri', 9, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[9]);
end;

function TRash_dokument._Getoforml_pri: TPersonal;
begin
  assert(not assigned(M_oforml_pri.BoldObject) or (M_oforml_pri.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'oforml_pri', M_oforml_pri.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_oforml_pri.BoldObject);
end;

procedure TRash_dokument._Setoforml_pri(const value: TPersonal);
begin
  M_oforml_pri.BoldObject := value;
end;

procedure TRash_dokumentList.Add(NewObject: TRash_dokument);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRash_dokumentList.IndexOf(anObject: TRash_dokument): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRash_dokumentList.Includes(anObject: TRash_dokument) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRash_dokumentList.AddNew: TRash_dokument;
begin
  result := TRash_dokument(InternalAddNew);
end;

procedure TRash_dokumentList.Insert(index: Integer; NewObject: TRash_dokument);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRash_dokumentList.GetBoldObject(index: Integer): TRash_dokument;
begin
  result := TRash_dokument(GetElement(index));
end;

procedure TRash_dokumentList.SetBoldObject(index: Integer; NewObject: TRash_dokument);
begin;
  SetElement(index, NewObject);
end;

{ TSkidki }

function TSkidki._Get_M_Chislo_dnei: TBAFloat;
begin
  assert(ValidateMember('TSkidki', 'Chislo_dnei', 2, TBAFloat));
  Result := TBAFloat(BoldMembers[2]);
end;

function TSkidki._GetChislo_dnei: double;
begin
  Result := M_Chislo_dnei.AsFloat;
end;

procedure TSkidki._SetChislo_dnei(const NewValue: double);
begin
  M_Chislo_dnei.AsFloat := NewValue;
end;

function TSkidki._Get_M_Procent_skidki: TBAFloat;
begin
  assert(ValidateMember('TSkidki', 'Procent_skidki', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TSkidki._GetProcent_skidki: double;
begin
  Result := M_Procent_skidki.AsFloat;
end;

procedure TSkidki._SetProcent_skidki(const NewValue: double);
begin
  M_Procent_skidki.AsFloat := NewValue;
end;

function TSkidki._Get_M_Abs_skidka: TBAFloat;
begin
  assert(ValidateMember('TSkidki', 'Abs_skidka', 4, TBAFloat));
  Result := TBAFloat(BoldMembers[4]);
end;

function TSkidki._GetAbs_skidka: double;
begin
  Result := M_Abs_skidka.AsFloat;
end;

procedure TSkidki._SetAbs_skidka(const NewValue: double);
begin
  M_Abs_skidka.AsFloat := NewValue;
end;

function TSkidki._Get_M_Diskont_stoim: TBAFloat;
begin
  assert(ValidateMember('TSkidki', 'Diskont_stoim', 5, TBAFloat));
  Result := TBAFloat(BoldMembers[5]);
end;

function TSkidki._GetDiskont_stoim: double;
begin
  Result := M_Diskont_stoim.AsFloat;
end;

procedure TSkidki._SetDiskont_stoim(const NewValue: double);
begin
  M_Diskont_stoim.AsFloat := NewValue;
end;

function TSkidki._Get_M_Isp_disk_stoim: TBABoolean;
begin
  assert(ValidateMember('TSkidki', 'Isp_disk_stoim', 6, TBABoolean));
  Result := TBABoolean(BoldMembers[6]);
end;

function TSkidki._GetIsp_disk_stoim: Boolean;
begin
  Result := M_Isp_disk_stoim.AsBoolean;
end;

procedure TSkidki._SetIsp_disk_stoim(const NewValue: Boolean);
begin
  M_Isp_disk_stoim.AsBoolean := NewValue;
end;

function TSkidki._Get_M_Cena: TBAFloat;
begin
  assert(ValidateMember('TSkidki', 'Cena', 7, TBAFloat));
  Result := TBAFloat(BoldMembers[7]);
end;

function TSkidki._GetCena: double;
begin
  Result := M_Cena.AsFloat;
end;

function TSkidki._Get_M_Yavl_osnov_dlya_rasch: TBoldObjectReference;
begin
  assert(ValidateMember('TSkidki', 'Yavl_osnov_dlya_rasch', 8, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[8]);
end;

function TSkidki._GetYavl_osnov_dlya_rasch: TDiscont_politika;
begin
  assert(not assigned(M_Yavl_osnov_dlya_rasch.BoldObject) or (M_Yavl_osnov_dlya_rasch.BoldObject is TDiscont_politika), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Yavl_osnov_dlya_rasch', M_Yavl_osnov_dlya_rasch.BoldObject.ClassName, 'TDiscont_politika']));
  Result := TDiscont_politika(M_Yavl_osnov_dlya_rasch.BoldObject);
end;

procedure TSkidki._SetYavl_osnov_dlya_rasch(const value: TDiscont_politika);
begin
  M_Yavl_osnov_dlya_rasch.BoldObject := value;
end;

function TSkidki._Get_M_Vhodit_v_politiku: TBoldObjectReference;
begin
  assert(ValidateMember('TSkidki', 'Vhodit_v_politiku', 9, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[9]);
end;

function TSkidki._GetVhodit_v_politiku: TCenovaya_politika;
begin
  assert(not assigned(M_Vhodit_v_politiku.BoldObject) or (M_Vhodit_v_politiku.BoldObject is TCenovaya_politika), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Vhodit_v_politiku', M_Vhodit_v_politiku.BoldObject.ClassName, 'TCenovaya_politika']));
  Result := TCenovaya_politika(M_Vhodit_v_politiku.BoldObject);
end;

procedure TSkidki._SetVhodit_v_politiku(const value: TCenovaya_politika);
begin
  M_Vhodit_v_politiku.BoldObject := value;
end;

function TSkidki._Getnapryamuyu_ocenivaet: TProgivanieList;
begin
  assert(ValidateMember('TSkidki', 'napryamuyu_ocenivaet', 10, TProgivanieList));
  Result := TProgivanieList(BoldMembers[10]);
end;

function TSkidki._Getispoljz_obychn_skidkinapryamuyu_ocenivaet: Tispoljz_obychn_skidkinapryamuyu_ocenivaetList;
begin
  assert(ValidateMember('TSkidki', 'ispoljz_obychn_skidkinapryamuyu_ocenivaet', 11, Tispoljz_obychn_skidkinapryamuyu_ocenivaetList));
  Result := Tispoljz_obychn_skidkinapryamuyu_ocenivaetList(BoldMembers[11]);
end;

procedure TSkidkiList.Add(NewObject: TSkidki);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSkidkiList.IndexOf(anObject: TSkidki): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSkidkiList.Includes(anObject: TSkidki) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSkidkiList.AddNew: TSkidki;
begin
  result := TSkidki(InternalAddNew);
end;

procedure TSkidkiList.Insert(index: Integer; NewObject: TSkidki);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSkidkiList.GetBoldObject(index: Integer): TSkidki;
begin
  result := TSkidki(GetElement(index));
end;

procedure TSkidkiList.SetBoldObject(index: Integer; NewObject: TSkidki);
begin;
  SetElement(index, NewObject);
end;

function TSkidki.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  if (Member = M_Cena) then result := _Cena_DeriveAndSubscribe else
  result := inherited GetDeriveMethodForMember(Member);
end;

function TSkidki.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

{ TCenovaya_politika }

function TCenovaya_politika._Get_M_Cena: TBAFloat;
begin
  assert(ValidateMember('TCenovaya_politika', 'Cena', 2, TBAFloat));
  Result := TBAFloat(BoldMembers[2]);
end;

function TCenovaya_politika._GetCena: double;
begin
  Result := M_Cena.AsFloat;
end;

procedure TCenovaya_politika._SetCena(const NewValue: double);
begin
  M_Cena.AsFloat := NewValue;
end;

function TCenovaya_politika._Get_M_istart: TBADate;
begin
  assert(ValidateMember('TCenovaya_politika', 'istart', 3, TBADate));
  Result := TBADate(BoldMembers[3]);
end;

function TCenovaya_politika._Getistart: TDate;
begin
  Result := M_istart.AsDate;
end;

procedure TCenovaya_politika._Setistart(const NewValue: TDate);
begin
  M_istart.AsDate := NewValue;
end;

function TCenovaya_politika._Get_M_iend: TBADate;
begin
  assert(ValidateMember('TCenovaya_politika', 'iend', 4, TBADate));
  Result := TBADate(BoldMembers[4]);
end;

function TCenovaya_politika._Getiend: TDate;
begin
  Result := M_iend.AsDate;
end;

procedure TCenovaya_politika._Setiend(const NewValue: TDate);
begin
  M_iend.AsDate := NewValue;
end;

function TCenovaya_politika._Get_M_Stoim_na_chel_v_sutki: TBAFloat;
begin
  assert(ValidateMember('TCenovaya_politika', 'Stoim_na_chel_v_sutki', 5, TBAFloat));
  Result := TBAFloat(BoldMembers[5]);
end;

function TCenovaya_politika._GetStoim_na_chel_v_sutki: double;
begin
  Result := M_Stoim_na_chel_v_sutki.AsFloat;
end;

procedure TCenovaya_politika._SetStoim_na_chel_v_sutki(const NewValue: double);
begin
  M_Stoim_na_chel_v_sutki.AsFloat := NewValue;
end;

function TCenovaya_politika._Get_M_Opredelyaet_cenu_dlya: TBoldObjectReference;
begin
  assert(ValidateMember('TCenovaya_politika', 'Opredelyaet_cenu_dlya', 6, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[6]);
end;

function TCenovaya_politika._GetOpredelyaet_cenu_dlya: TKlass_nomera;
begin
  assert(not assigned(M_Opredelyaet_cenu_dlya.BoldObject) or (M_Opredelyaet_cenu_dlya.BoldObject is TKlass_nomera), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Opredelyaet_cenu_dlya', M_Opredelyaet_cenu_dlya.BoldObject.ClassName, 'TKlass_nomera']));
  Result := TKlass_nomera(M_Opredelyaet_cenu_dlya.BoldObject);
end;

procedure TCenovaya_politika._SetOpredelyaet_cenu_dlya(const value: TKlass_nomera);
begin
  M_Opredelyaet_cenu_dlya.BoldObject := value;
end;

function TCenovaya_politika._GetImeet_skidki: TSkidkiList;
begin
  assert(ValidateMember('TCenovaya_politika', 'Imeet_skidki', 7, TSkidkiList));
  Result := TSkidkiList(BoldMembers[7]);
end;

procedure TCenovaya_politikaList.Add(NewObject: TCenovaya_politika);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TCenovaya_politikaList.IndexOf(anObject: TCenovaya_politika): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TCenovaya_politikaList.Includes(anObject: TCenovaya_politika) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TCenovaya_politikaList.AddNew: TCenovaya_politika;
begin
  result := TCenovaya_politika(InternalAddNew);
end;

procedure TCenovaya_politikaList.Insert(index: Integer; NewObject: TCenovaya_politika);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TCenovaya_politikaList.GetBoldObject(index: Integer): TCenovaya_politika;
begin
  result := TCenovaya_politika(GetElement(index));
end;

procedure TCenovaya_politikaList.SetBoldObject(index: Integer; NewObject: TCenovaya_politika);
begin;
  SetElement(index, NewObject);
end;

{ TKlient }

function TKlient._Get_M_Yavl_yur_licom: TBABoolean;
begin
  assert(ValidateMember('TKlient', 'Yavl_yur_licom', 33, TBABoolean));
  Result := TBABoolean(BoldMembers[33]);
end;

function TKlient._GetYavl_yur_licom: Boolean;
begin
  Result := M_Yavl_yur_licom.AsBoolean;
end;

procedure TKlient._SetYavl_yur_licom(const NewValue: Boolean);
begin
  M_Yavl_yur_licom.AsBoolean := NewValue;
end;

function TKlient._Get_M_Imenovanie: TBAString;
begin
  assert(ValidateMember('TKlient', 'Imenovanie', 34, TBAString));
  Result := TBAString(BoldMembers[34]);
end;

function TKlient._GetImenovanie: String;
begin
  Result := M_Imenovanie.AsString;
end;

function TKlient._Get_M_Adres: TBAString;
begin
  assert(ValidateMember('TKlient', 'Adres', 35, TBAString));
  Result := TBAString(BoldMembers[35]);
end;

function TKlient._GetAdres: String;
begin
  Result := M_Adres.AsString;
end;

function TKlient._Get_M_Telefony: TBAString;
begin
  assert(ValidateMember('TKlient', 'Telefony', 36, TBAString));
  Result := TBAString(BoldMembers[36]);
end;

function TKlient._GetTelefony: String;
begin
  Result := M_Telefony.AsString;
end;

function TKlient._Get_M_Ident_objekta_risunka: TBAInteger;
begin
  assert(ValidateMember('TKlient', 'Ident_objekta_risunka', 37, TBAInteger));
  Result := TBAInteger(BoldMembers[37]);
end;

function TKlient._GetIdent_objekta_risunka: Integer;
begin
  Result := M_Ident_objekta_risunka.AsInteger;
end;

procedure TKlient._SetIdent_objekta_risunka(const NewValue: Integer);
begin
  M_Ident_objekta_risunka.AsInteger := NewValue;
end;

function TKlient._Get_M_Inf_o_kliente: TBAString;
begin
  assert(ValidateMember('TKlient', 'Inf_o_kliente', 38, TBAString));
  Result := TBAString(BoldMembers[38]);
end;

function TKlient._GetInf_o_kliente: String;
begin
  Result := M_Inf_o_kliente.AsString;
end;

function TKlient._Get_M_V_ogidanii: TBABoolean;
begin
  assert(ValidateMember('TKlient', 'V_ogidanii', 39, TBABoolean));
  Result := TBABoolean(BoldMembers[39]);
end;

function TKlient._GetV_ogidanii: Boolean;
begin
  Result := M_V_ogidanii.AsBoolean;
end;

function TKlient._Get_M_Vyselen: TBABoolean;
begin
  assert(ValidateMember('TKlient', 'Vyselen', 40, TBABoolean));
  Result := TBABoolean(BoldMembers[40]);
end;

function TKlient._GetVyselen: Boolean;
begin
  Result := M_Vyselen.AsBoolean;
end;

function TKlient._Get_M_Chislo_progivanii: TBAInteger;
begin
  assert(ValidateMember('TKlient', 'Chislo_progivanii', 41, TBAInteger));
  Result := TBAInteger(BoldMembers[41]);
end;

function TKlient._GetChislo_progivanii: Integer;
begin
  Result := M_Chislo_progivanii.AsInteger;
end;

function TKlient._Get_M_Chislo_sovmestn_prog: TBAInteger;
begin
  assert(ValidateMember('TKlient', 'Chislo_sovmestn_prog', 42, TBAInteger));
  Result := TBAInteger(BoldMembers[42]);
end;

function TKlient._GetChislo_sovmestn_prog: Integer;
begin
  Result := M_Chislo_sovmestn_prog.AsInteger;
end;

procedure TKlient._SetChislo_sovmestn_prog(const NewValue: Integer);
begin
  M_Chislo_sovmestn_prog.AsInteger := NewValue;
end;

function TKlient._Get_M_Komment_sovm_progiv: TBAString;
begin
  assert(ValidateMember('TKlient', 'Komment_sovm_progiv', 43, TBAString));
  Result := TBAString(BoldMembers[43]);
end;

function TKlient._GetKomment_sovm_progiv: String;
begin
  Result := M_Komment_sovm_progiv.AsString;
end;

procedure TKlient._SetKomment_sovm_progiv(const NewValue: String);
begin
  M_Komment_sovm_progiv.AsString := NewValue;
end;

function TKlient._GetProgivaet_soglasno: TList_klientaList;
begin
  assert(ValidateMember('TKlient', 'Progivaet_soglasno', 44, TList_klientaList));
  Result := TList_klientaList(BoldMembers[44]);
end;

function TKlient._GetProgivanie: TProgivanieList;
begin
  assert(ValidateMember('TKlient', 'Progivanie', 45, TProgivanieList));
  Result := TProgivanieList(BoldMembers[45]);
end;

function TKlient._Getoplachivaet: TList_klientaList;
begin
  assert(ValidateMember('TKlient', 'oplachivaet', 46, TList_klientaList));
  Result := TList_klientaList(BoldMembers[46]);
end;

function TKlient._Getimeet_broni: TBronjList;
begin
  assert(ValidateMember('TKlient', 'imeet_broni', 47, TBronjList));
  Result := TBronjList(BoldMembers[47]);
end;

function TKlient._Getgdet_soglasno: TOgidanieList;
begin
  assert(ValidateMember('TKlient', 'gdet_soglasno', 48, TOgidanieList));
  Result := TOgidanieList(BoldMembers[48]);
end;

procedure TKlientList.Add(NewObject: TKlient);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TKlientList.IndexOf(anObject: TKlient): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TKlientList.Includes(anObject: TKlient) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TKlientList.AddNew: TKlient;
begin
  result := TKlient(InternalAddNew);
end;

procedure TKlientList.Insert(index: Integer; NewObject: TKlient);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TKlientList.GetBoldObject(index: Integer): TKlient;
begin
  result := TKlient(GetElement(index));
end;

procedure TKlientList.SetBoldObject(index: Integer; NewObject: TKlient);
begin;
  SetElement(index, NewObject);
end;

function TKlient.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  if (Member = M_Inf_o_kliente) then result := _Inf_o_kliente_DeriveAndSubscribe else
  if (Member = M_Chislo_progivanii) then result := _Chislo_progivanii_DeriveAndSubscribe else
  result := inherited GetDeriveMethodForMember(Member);
end;

function TKlient.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

{ TPersonal }

function TPersonal._Get_M_Login: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Login', 33, TBAString));
  Result := TBAString(BoldMembers[33]);
end;

function TPersonal._GetLogin: String;
begin
  Result := M_Login.AsString;
end;

procedure TPersonal._SetLogin(const NewValue: String);
begin
  M_Login.AsString := NewValue;
end;

function TPersonal._Get_M_Parolj: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Parolj', 34, TBAString));
  Result := TBAString(BoldMembers[34]);
end;

function TPersonal._GetParolj: String;
begin
  Result := M_Parolj.AsString;
end;

procedure TPersonal._SetParolj(const NewValue: String);
begin
  M_Parolj.AsString := NewValue;
end;

function TPersonal._Get_M_Prava: TBAInteger;
begin
  assert(ValidateMember('TPersonal', 'Prava', 35, TBAInteger));
  Result := TBAInteger(BoldMembers[35]);
end;

function TPersonal._GetPrava: Integer;
begin
  Result := M_Prava.AsInteger;
end;

procedure TPersonal._SetPrava(const NewValue: Integer);
begin
  M_Prava.AsInteger := NewValue;
end;

function TPersonal._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Kommentarii', 36, TBAString));
  Result := TBAString(BoldMembers[36]);
end;

function TPersonal._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TPersonal._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TPersonal._Get_M_Razreshitj_vsyo: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_vsyo', 37, TBABoolean));
  Result := TBABoolean(BoldMembers[37]);
end;

function TPersonal._GetRazreshitj_vsyo: Boolean;
begin
  Result := M_Razreshitj_vsyo.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_vsyo(const NewValue: Boolean);
begin
  M_Razreshitj_vsyo.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razresh_administr: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razresh_administr', 38, TBABoolean));
  Result := TBABoolean(BoldMembers[38]);
end;

function TPersonal._GetRazresh_administr: Boolean;
begin
  Result := M_Razresh_administr.AsBoolean;
end;

procedure TPersonal._SetRazresh_administr(const NewValue: Boolean);
begin
  M_Razresh_administr.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razresh_nastroiku_raboty: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razresh_nastroiku_raboty', 39, TBABoolean));
  Result := TBABoolean(BoldMembers[39]);
end;

function TPersonal._GetRazresh_nastroiku_raboty: Boolean;
begin
  Result := M_Razresh_nastroiku_raboty.AsBoolean;
end;

procedure TPersonal._SetRazresh_nastroiku_raboty(const NewValue: Boolean);
begin
  M_Razresh_nastroiku_raboty.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_prosmotr_logov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_prosmotr_logov', 40, TBABoolean));
  Result := TBABoolean(BoldMembers[40]);
end;

function TPersonal._GetRazreshitj_prosmotr_logov: Boolean;
begin
  Result := M_Razreshitj_prosmotr_logov.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_prosmotr_logov(const NewValue: Boolean);
begin
  M_Razreshitj_prosmotr_logov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_manip_klassov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_manip_klassov', 41, TBABoolean));
  Result := TBABoolean(BoldMembers[41]);
end;

function TPersonal._GetRazr_manip_klassov: Boolean;
begin
  Result := M_Razr_manip_klassov.AsBoolean;
end;

procedure TPersonal._SetRazr_manip_klassov(const NewValue: Boolean);
begin
  M_Razr_manip_klassov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_manip_nomerov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_manip_nomerov', 42, TBABoolean));
  Result := TBABoolean(BoldMembers[42]);
end;

function TPersonal._GetRazreshitj_manip_nomerov: Boolean;
begin
  Result := M_Razreshitj_manip_nomerov.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_manip_nomerov(const NewValue: Boolean);
begin
  M_Razreshitj_manip_nomerov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_nastroiku_cennobraz: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_nastroiku_cennobraz', 43, TBABoolean));
  Result := TBABoolean(BoldMembers[43]);
end;

function TPersonal._GetRazr_nastroiku_cennobraz: Boolean;
begin
  Result := M_Razr_nastroiku_cennobraz.AsBoolean;
end;

procedure TPersonal._SetRazr_nastroiku_cennobraz(const NewValue: Boolean);
begin
  M_Razr_nastroiku_cennobraz.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_manip_otelei: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_manip_otelei', 44, TBABoolean));
  Result := TBABoolean(BoldMembers[44]);
end;

function TPersonal._GetRazreshitj_manip_otelei: Boolean;
begin
  Result := M_Razreshitj_manip_otelei.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_manip_otelei(const NewValue: Boolean);
begin
  M_Razreshitj_manip_otelei.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_udalenie_ostaljnogo: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_udalenie_ostaljnogo', 45, TBABoolean));
  Result := TBABoolean(BoldMembers[45]);
end;

function TPersonal._GetRazreshitj_udalenie_ostaljnogo: Boolean;
begin
  Result := M_Razreshitj_udalenie_ostaljnogo.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_udalenie_ostaljnogo(const NewValue: Boolean);
begin
  M_Razreshitj_udalenie_ostaljnogo.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_prav_redkomen_sprav: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_prav_redkomen_sprav', 46, TBABoolean));
  Result := TBABoolean(BoldMembers[46]);
end;

function TPersonal._GetRazr_prav_redkomen_sprav: Boolean;
begin
  Result := M_Razr_prav_redkomen_sprav.AsBoolean;
end;

procedure TPersonal._SetRazr_prav_redkomen_sprav(const NewValue: Boolean);
begin
  M_Razr_prav_redkomen_sprav.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_prav_oper_razdelov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_prav_oper_razdelov', 47, TBABoolean));
  Result := TBABoolean(BoldMembers[47]);
end;

function TPersonal._GetRazr_prav_oper_razdelov: Boolean;
begin
  Result := M_Razr_prav_oper_razdelov.AsBoolean;
end;

procedure TPersonal._SetRazr_prav_oper_razdelov(const NewValue: Boolean);
begin
  M_Razr_prav_oper_razdelov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_prosm_finans_otchyotnosti: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_prosm_finans_otchyotnosti', 48, TBABoolean));
  Result := TBABoolean(BoldMembers[48]);
end;

function TPersonal._GetRazr_prosm_finans_otchyotnosti: Boolean;
begin
  Result := M_Razr_prosm_finans_otchyotnosti.AsBoolean;
end;

procedure TPersonal._SetRazr_prosm_finans_otchyotnosti(const NewValue: Boolean);
begin
  M_Razr_prosm_finans_otchyotnosti.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_prosm_balans_znach: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_prosm_balans_znach', 49, TBABoolean));
  Result := TBABoolean(BoldMembers[49]);
end;

function TPersonal._GetRazr_prosm_balans_znach: Boolean;
begin
  Result := M_Razr_prosm_balans_znach.AsBoolean;
end;

procedure TPersonal._SetRazr_prosm_balans_znach(const NewValue: Boolean);
begin
  M_Razr_prosm_balans_znach.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Identifikator_otelya: TBAInteger;
begin
  assert(ValidateMember('TPersonal', 'Identifikator_otelya', 50, TBAInteger));
  Result := TBAInteger(BoldMembers[50]);
end;

function TPersonal._GetIdentifikator_otelya: Integer;
begin
  Result := M_Identifikator_otelya.AsInteger;
end;

procedure TPersonal._SetIdentifikator_otelya(const NewValue: Integer);
begin
  M_Identifikator_otelya.AsInteger := NewValue;
end;

function TPersonal._Getdeistviya_fiksiruyutsya_v: TLog_operaciiList;
begin
  assert(ValidateMember('TPersonal', 'deistviya_fiksiruyutsya_v', 51, TLog_operaciiList));
  Result := TLog_operaciiList(BoldMembers[51]);
end;

function TPersonal._Get_M_rabotaet_na_dolgn: TBoldObjectReference;
begin
  assert(ValidateMember('TPersonal', 'rabotaet_na_dolgn', 52, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[52]);
end;

function TPersonal._Getrabotaet_na_dolgn: TDolgnostj;
begin
  assert(not assigned(M_rabotaet_na_dolgn.BoldObject) or (M_rabotaet_na_dolgn.BoldObject is TDolgnostj), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'rabotaet_na_dolgn', M_rabotaet_na_dolgn.BoldObject.ClassName, 'TDolgnostj']));
  Result := TDolgnostj(M_rabotaet_na_dolgn.BoldObject);
end;

procedure TPersonal._Setrabotaet_na_dolgn(const value: TDolgnostj);
begin
  M_rabotaet_na_dolgn.BoldObject := value;
end;

function TPersonal._Getzanimaetsya: TList_klientaList;
begin
  assert(ValidateMember('TPersonal', 'zanimaetsya', 53, TList_klientaList));
  Result := TList_klientaList(BoldMembers[53]);
end;

function TPersonal._Getosush_rashody: TRash_dokumentList;
begin
  assert(ValidateMember('TPersonal', 'osush_rashody', 54, TRash_dokumentList));
  Result := TRash_dokumentList(BoldMembers[54]);
end;

procedure TPersonalList.Add(NewObject: TPersonal);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonalList.IndexOf(anObject: TPersonal): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonalList.Includes(anObject: TPersonal) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonalList.AddNew: TPersonal;
begin
  result := TPersonal(InternalAddNew);
end;

procedure TPersonalList.Insert(index: Integer; NewObject: TPersonal);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonalList.GetBoldObject(index: Integer): TPersonal;
begin
  result := TPersonal(GetElement(index));
end;

procedure TPersonalList.SetBoldObject(index: Integer; NewObject: TPersonal);
begin;
  SetElement(index, NewObject);
end;

{ TList_klienta }

function TList_klienta._Get_M_Data_vjezda: TBADate;
begin
  assert(ValidateMember('TList_klienta', 'Data_vjezda', 10, TBADate));
  Result := TBADate(BoldMembers[10]);
end;

function TList_klienta._GetData_vjezda: TDate;
begin
  Result := M_Data_vjezda.AsDate;
end;

procedure TList_klienta._SetData_vjezda(const NewValue: TDate);
begin
  M_Data_vjezda.AsDate := NewValue;
end;

function TList_klienta._Get_M_Data_vyezda: TBADate;
begin
  assert(ValidateMember('TList_klienta', 'Data_vyezda', 11, TBADate));
  Result := TBADate(BoldMembers[11]);
end;

function TList_klienta._GetData_vyezda: TDate;
begin
  Result := M_Data_vyezda.AsDate;
end;

procedure TList_klienta._SetData_vyezda(const NewValue: TDate);
begin
  M_Data_vyezda.AsDate := NewValue;
end;

function TList_klienta._Get_M_V_dnyah: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'V_dnyah', 12, TBAFloat));
  Result := TBAFloat(BoldMembers[12]);
end;

function TList_klienta._GetV_dnyah: double;
begin
  Result := M_V_dnyah.AsFloat;
end;

procedure TList_klienta._SetV_dnyah(const NewValue: double);
begin
  M_V_dnyah.AsFloat := NewValue;
end;

function TList_klienta._Get_M_V_dnyah_vych: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'V_dnyah_vych', 13, TBAFloat));
  Result := TBAFloat(BoldMembers[13]);
end;

function TList_klienta._GetV_dnyah_vych: double;
begin
  Result := M_V_dnyah_vych.AsFloat;
end;

function TList_klienta._Get_M_Oplata_vsya: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Oplata_vsya', 14, TBAFloat));
  Result := TBAFloat(BoldMembers[14]);
end;

function TList_klienta._GetOplata_vsya: double;
begin
  Result := M_Oplata_vsya.AsFloat;
end;

function TList_klienta._Get_M_Vremeni_proshlo: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Vremeni_proshlo', 15, TBAFloat));
  Result := TBAFloat(BoldMembers[15]);
end;

function TList_klienta._GetVremeni_proshlo: double;
begin
  Result := M_Vremeni_proshlo.AsFloat;
end;

function TList_klienta._Get_M_Dnei_proshlo: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Dnei_proshlo', 16, TBAFloat));
  Result := TBAFloat(BoldMembers[16]);
end;

function TList_klienta._GetDnei_proshlo: double;
begin
  Result := M_Dnei_proshlo.AsFloat;
end;

function TList_klienta._Get_M_Stoimostj_proshlo: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Stoimostj_proshlo', 17, TBAFloat));
  Result := TBAFloat(BoldMembers[17]);
end;

function TList_klienta._GetStoimostj_proshlo: double;
begin
  Result := M_Stoimostj_proshlo.AsFloat;
end;

function TList_klienta._Get_M_Vremeni_ostalosj: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Vremeni_ostalosj', 18, TBAFloat));
  Result := TBAFloat(BoldMembers[18]);
end;

function TList_klienta._GetVremeni_ostalosj: double;
begin
  Result := M_Vremeni_ostalosj.AsFloat;
end;

function TList_klienta._Get_M_Dnei_ostalosj: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Dnei_ostalosj', 19, TBAFloat));
  Result := TBAFloat(BoldMembers[19]);
end;

function TList_klienta._GetDnei_ostalosj: double;
begin
  Result := M_Dnei_ostalosj.AsFloat;
end;

function TList_klienta._Get_M_Stoimostj_ostalosj: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Stoimostj_ostalosj', 20, TBAFloat));
  Result := TBAFloat(BoldMembers[20]);
end;

function TList_klienta._GetStoimostj_ostalosj: double;
begin
  Result := M_Stoimostj_ostalosj.AsFloat;
end;

function TList_klienta._Get_M_Oplacheno_vsego: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Oplacheno_vsego', 21, TBAFloat));
  Result := TBAFloat(BoldMembers[21]);
end;

function TList_klienta._GetOplacheno_vsego: double;
begin
  Result := M_Oplacheno_vsego.AsFloat;
end;

function TList_klienta._Get_M_Zadolgaet_klient: TBABoolean;
begin
  assert(ValidateMember('TList_klienta', 'Zadolgaet_klient', 22, TBABoolean));
  Result := TBABoolean(BoldMembers[22]);
end;

function TList_klienta._GetZadolgaet_klient: Boolean;
begin
  Result := M_Zadolgaet_klient.AsBoolean;
end;

function TList_klienta._Get_M_Sverh_sroka: TBABoolean;
begin
  assert(ValidateMember('TList_klienta', 'Sverh_sroka', 23, TBABoolean));
  Result := TBABoolean(BoldMembers[23]);
end;

function TList_klienta._GetSverh_sroka: Boolean;
begin
  Result := M_Sverh_sroka.AsBoolean;
end;

function TList_klienta._Get_M_Poseleno_chislo: TBAInteger;
begin
  assert(ValidateMember('TList_klienta', 'Poseleno_chislo', 24, TBAInteger));
  Result := TBAInteger(BoldMembers[24]);
end;

function TList_klienta._GetPoseleno_chislo: Integer;
begin
  Result := M_Poseleno_chislo.AsInteger;
end;

function TList_klienta._Get_M_Informaciya_o_klientah: TBAString;
begin
  assert(ValidateMember('TList_klienta', 'Informaciya_o_klientah', 25, TBAString));
  Result := TBAString(BoldMembers[25]);
end;

function TList_klienta._GetInformaciya_o_klientah: String;
begin
  Result := M_Informaciya_o_klientah.AsString;
end;

function TList_klienta._Get_M_Schitatj_po_kol_chelovek: TBABoolean;
begin
  assert(ValidateMember('TList_klienta', 'Schitatj_po_kol_chelovek', 26, TBABoolean));
  Result := TBABoolean(BoldMembers[26]);
end;

function TList_klienta._GetSchitatj_po_kol_chelovek: Boolean;
begin
  Result := M_Schitatj_po_kol_chelovek.AsBoolean;
end;

procedure TList_klienta._SetSchitatj_po_kol_chelovek(const NewValue: Boolean);
begin
  M_Schitatj_po_kol_chelovek.AsBoolean := NewValue;
end;

function TList_klienta._Get_M_Stoim_v_sutki_vychisl: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Stoim_v_sutki_vychisl', 27, TBAFloat));
  Result := TBAFloat(BoldMembers[27]);
end;

function TList_klienta._GetStoim_v_sutki_vychisl: double;
begin
  Result := M_Stoim_v_sutki_vychisl.AsFloat;
end;

procedure TList_klienta._SetStoim_v_sutki_vychisl(const NewValue: double);
begin
  M_Stoim_v_sutki_vychisl.AsFloat := NewValue;
end;

function TList_klienta._Get_M_Nachalo_intervala: TBADateTime;
begin
  assert(ValidateMember('TList_klienta', 'Nachalo_intervala', 28, TBADateTime));
  Result := TBADateTime(BoldMembers[28]);
end;

function TList_klienta._GetNachalo_intervala: TDateTime;
begin
  Result := M_Nachalo_intervala.AsDateTime;
end;

function TList_klienta._Get_M_Konec_intervala: TBADateTime;
begin
  assert(ValidateMember('TList_klienta', 'Konec_intervala', 29, TBADateTime));
  Result := TBADateTime(BoldMembers[29]);
end;

function TList_klienta._GetKonec_intervala: TDateTime;
begin
  Result := M_Konec_intervala.AsDateTime;
end;

function TList_klienta._Get_M_Summa_za_interval: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Summa_za_interval', 30, TBAFloat));
  Result := TBAFloat(BoldMembers[30]);
end;

function TList_klienta._GetSumma_za_interval: double;
begin
  Result := M_Summa_za_interval.AsFloat;
end;

function TList_klienta._Get_M_Odin_chas: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Odin_chas', 31, TBAFloat));
  Result := TBAFloat(BoldMembers[31]);
end;

function TList_klienta._GetOdin_chas: double;
begin
  Result := M_Odin_chas.AsFloat;
end;

function TList_klienta._Get_M_Odin_denj: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Odin_denj', 32, TBAFloat));
  Result := TBAFloat(BoldMembers[32]);
end;

function TList_klienta._GetOdin_denj: double;
begin
  Result := M_Odin_denj.AsFloat;
end;

function TList_klienta._Get_M_Tek_vremya: TBADateTime;
begin
  assert(ValidateMember('TList_klienta', 'Tek_vremya', 33, TBADateTime));
  Result := TBADateTime(BoldMembers[33]);
end;

function TList_klienta._GetTek_vremya: TDateTime;
begin
  Result := M_Tek_vremya.AsDateTime;
end;

function TList_klienta._Get_M_Vremeni_vych: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Vremeni_vych', 34, TBAFloat));
  Result := TBAFloat(BoldMembers[34]);
end;

function TList_klienta._GetVremeni_vych: double;
begin
  Result := M_Vremeni_vych.AsFloat;
end;

function TList_klienta._Get_M_Vyezd_faktich: TBADateTime;
begin
  assert(ValidateMember('TList_klienta', 'Vyezd_faktich', 35, TBADateTime));
  Result := TBADateTime(BoldMembers[35]);
end;

function TList_klienta._GetVyezd_faktich: TDateTime;
begin
  Result := M_Vyezd_faktich.AsDateTime;
end;

procedure TList_klienta._SetVyezd_faktich(const NewValue: TDateTime);
begin
  M_Vyezd_faktich.AsDateTime := NewValue;
end;

function TList_klienta._Get_M_Osvobogdyon: TBABoolean;
begin
  assert(ValidateMember('TList_klienta', 'Osvobogdyon', 36, TBABoolean));
  Result := TBABoolean(BoldMembers[36]);
end;

function TList_klienta._GetOsvobogdyon: Boolean;
begin
  Result := M_Osvobogdyon.AsBoolean;
end;

function TList_klienta._Get_M_Posl_dlya_nomera: TBABoolean;
begin
  assert(ValidateMember('TList_klienta', 'Posl_dlya_nomera', 37, TBABoolean));
  Result := TBABoolean(BoldMembers[37]);
end;

function TList_klienta._GetPosl_dlya_nomera: Boolean;
begin
  Result := M_Posl_dlya_nomera.AsBoolean;
end;

function TList_klienta._Get_M_Oplata_vsya_s_dostavk: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Oplata_vsya_s_dostavk', 38, TBAFloat));
  Result := TBAFloat(BoldMembers[38]);
end;

function TList_klienta._GetOplata_vsya_s_dostavk: double;
begin
  Result := M_Oplata_vsya_s_dostavk.AsFloat;
end;

function TList_klienta._Get_M_Dolg_klient: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Dolg_klient', 39, TBAFloat));
  Result := TBAFloat(BoldMembers[39]);
end;

function TList_klienta._GetDolg_klient: double;
begin
  Result := M_Dolg_klient.AsFloat;
end;

function TList_klienta._Get_M_Dolya_zaversh: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Dolya_zaversh', 40, TBAFloat));
  Result := TBAFloat(BoldMembers[40]);
end;

function TList_klienta._GetDolya_zaversh: double;
begin
  Result := M_Dolya_zaversh.AsFloat;
end;

function TList_klienta._Get_M_Stoimostj_ustan: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Stoimostj_ustan', 41, TBAFloat));
  Result := TBAFloat(BoldMembers[41]);
end;

function TList_klienta._GetStoimostj_ustan: double;
begin
  Result := M_Stoimostj_ustan.AsFloat;
end;

procedure TList_klienta._SetStoimostj_ustan(const NewValue: double);
begin
  M_Stoimostj_ustan.AsFloat := NewValue;
end;

function TList_klienta._Get_M_V_dnyah_proshlo_s_chas: TBAString;
begin
  assert(ValidateMember('TList_klienta', 'V_dnyah_proshlo_s_chas', 42, TBAString));
  Result := TBAString(BoldMembers[42]);
end;

function TList_klienta._GetV_dnyah_proshlo_s_chas: String;
begin
  Result := M_V_dnyah_proshlo_s_chas.AsString;
end;

function TList_klienta._Get_M_Chasov_ostat_po_mod: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Chasov_ostat_po_mod', 43, TBAFloat));
  Result := TBAFloat(BoldMembers[43]);
end;

function TList_klienta._GetChasov_ostat_po_mod: double;
begin
  Result := M_Chasov_ostat_po_mod.AsFloat;
end;

function TList_klienta._Get_M_Dnei_ostat_po_mod: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Dnei_ostat_po_mod', 44, TBAFloat));
  Result := TBAFloat(BoldMembers[44]);
end;

function TList_klienta._GetDnei_ostat_po_mod: double;
begin
  Result := M_Dnei_ostat_po_mod.AsFloat;
end;

function TList_klienta._Get_M_Dob_stoimostj_pereoc: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Dob_stoimostj_pereoc', 45, TBAFloat));
  Result := TBAFloat(BoldMembers[45]);
end;

function TList_klienta._GetDob_stoimostj_pereoc: double;
begin
  Result := M_Dob_stoimostj_pereoc.AsFloat;
end;

function TList_klienta._Get_M_Procent_otchisl_bronj: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Procent_otchisl_bronj', 46, TBAFloat));
  Result := TBAFloat(BoldMembers[46]);
end;

function TList_klienta._GetProcent_otchisl_bronj: double;
begin
  Result := M_Procent_otchisl_bronj.AsFloat;
end;

procedure TList_klienta._SetProcent_otchisl_bronj(const NewValue: double);
begin
  M_Procent_otchisl_bronj.AsFloat := NewValue;
end;

function TList_klienta._Get_M_Summa_bronj: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Summa_bronj', 47, TBAFloat));
  Result := TBAFloat(BoldMembers[47]);
end;

function TList_klienta._GetSumma_bronj: double;
begin
  Result := M_Summa_bronj.AsFloat;
end;

procedure TList_klienta._SetSumma_bronj(const NewValue: double);
begin
  M_Summa_bronj.AsFloat := NewValue;
end;

function TList_klienta._Get_M_Na_vyselenie: TBABoolean;
begin
  assert(ValidateMember('TList_klienta', 'Na_vyselenie', 48, TBABoolean));
  Result := TBABoolean(BoldMembers[48]);
end;

function TList_klienta._GetNa_vyselenie: Boolean;
begin
  Result := M_Na_vyselenie.AsBoolean;
end;

function TList_klienta._Get_M_Stoim_na_chel_v_sutki: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Stoim_na_chel_v_sutki', 49, TBAFloat));
  Result := TBAFloat(BoldMembers[49]);
end;

function TList_klienta._GetStoim_na_chel_v_sutki: double;
begin
  Result := M_Stoim_na_chel_v_sutki.AsFloat;
end;

procedure TList_klienta._SetStoim_na_chel_v_sutki(const NewValue: double);
begin
  M_Stoim_na_chel_v_sutki.AsFloat := NewValue;
end;

function TList_klienta._Get_M_Stoim_na_chel_vychisl: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Stoim_na_chel_vychisl', 50, TBAFloat));
  Result := TBAFloat(BoldMembers[50]);
end;

function TList_klienta._GetStoim_na_chel_vychisl: double;
begin
  Result := M_Stoim_na_chel_vychisl.AsFloat;
end;

function TList_klienta._Get_M_Schitatj_dlya_kagd: TBABoolean;
begin
  assert(ValidateMember('TList_klienta', 'Schitatj_dlya_kagd', 51, TBABoolean));
  Result := TBABoolean(BoldMembers[51]);
end;

function TList_klienta._GetSchitatj_dlya_kagd: Boolean;
begin
  Result := M_Schitatj_dlya_kagd.AsBoolean;
end;

procedure TList_klienta._SetSchitatj_dlya_kagd(const NewValue: Boolean);
begin
  M_Schitatj_dlya_kagd.AsBoolean := NewValue;
end;

function TList_klienta._Get_M_Stoim_pri_rasch_dlya_kagd: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Stoim_pri_rasch_dlya_kagd', 52, TBAFloat));
  Result := TBAFloat(BoldMembers[52]);
end;

function TList_klienta._GetStoim_pri_rasch_dlya_kagd: double;
begin
  Result := M_Stoim_pri_rasch_dlya_kagd.AsFloat;
end;

function TList_klienta._Get_M_Vygr_v_internet: TBABoolean;
begin
  assert(ValidateMember('TList_klienta', 'Vygr_v_internet', 53, TBABoolean));
  Result := TBABoolean(BoldMembers[53]);
end;

function TList_klienta._GetVygr_v_internet: Boolean;
begin
  Result := M_Vygr_v_internet.AsBoolean;
end;

procedure TList_klienta._SetVygr_v_internet(const NewValue: Boolean);
begin
  M_Vygr_v_internet.AsBoolean := NewValue;
end;

function TList_klienta._Get_M_Zagr_iz_interneta: TBABoolean;
begin
  assert(ValidateMember('TList_klienta', 'Zagr_iz_interneta', 54, TBABoolean));
  Result := TBABoolean(BoldMembers[54]);
end;

function TList_klienta._GetZagr_iz_interneta: Boolean;
begin
  Result := M_Zagr_iz_interneta.AsBoolean;
end;

procedure TList_klienta._SetZagr_iz_interneta(const NewValue: Boolean);
begin
  M_Zagr_iz_interneta.AsBoolean := NewValue;
end;

function TList_klienta._Get_M_IDInternet: TBAInteger;
begin
  assert(ValidateMember('TList_klienta', 'IDInternet', 55, TBAInteger));
  Result := TBAInteger(BoldMembers[55]);
end;

function TList_klienta._GetIDInternet: Integer;
begin
  Result := M_IDInternet.AsInteger;
end;

procedure TList_klienta._SetIDInternet(const NewValue: Integer);
begin
  M_IDInternet.AsInteger := NewValue;
end;

function TList_klienta._Get_M_Delitj_stoim_nomera: TBABoolean;
begin
  assert(ValidateMember('TList_klienta', 'Delitj_stoim_nomera', 56, TBABoolean));
  Result := TBABoolean(BoldMembers[56]);
end;

function TList_klienta._GetDelitj_stoim_nomera: Boolean;
begin
  Result := M_Delitj_stoim_nomera.AsBoolean;
end;

procedure TList_klienta._SetDelitj_stoim_nomera(const NewValue: Boolean);
begin
  M_Delitj_stoim_nomera.AsBoolean := NewValue;
end;

function TList_klienta._Get_M_Dob_stoim_ot_prodleniya: TBAFloat;
begin
  assert(ValidateMember('TList_klienta', 'Dob_stoim_ot_prodleniya', 57, TBAFloat));
  Result := TBAFloat(BoldMembers[57]);
end;

function TList_klienta._GetDob_stoim_ot_prodleniya: double;
begin
  Result := M_Dob_stoim_ot_prodleniya.AsFloat;
end;

function TList_klienta._GetPredost_diskont: TDiscont_politikaList;
begin
  assert(ValidateMember('TList_klienta', 'Predost_diskont', 58, TDiscont_politikaList));
  Result := TDiscont_politikaList(BoldMembers[58]);
end;

function TList_klienta._GetLinkPredost_diskont_vPredost_diskont: TLinkPredost_diskont_vPredost_diskontList;
begin
  assert(ValidateMember('TList_klienta', 'LinkPredost_diskont_vPredost_diskont', 59, TLinkPredost_diskont_vPredost_diskontList));
  Result := TLinkPredost_diskont_vPredost_diskontList(BoldMembers[59]);
end;

function TList_klienta._Get_M_Opis_progiv_v: TBoldObjectReference;
begin
  assert(ValidateMember('TList_klienta', 'Opis_progiv_v', 60, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[60]);
end;

function TList_klienta._GetOpis_progiv_v: TNomer_arendy;
begin
  assert(not assigned(M_Opis_progiv_v.BoldObject) or (M_Opis_progiv_v.BoldObject is TNomer_arendy), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'Opis_progiv_v', M_Opis_progiv_v.BoldObject.ClassName, 'TNomer_arendy']));
  Result := TNomer_arendy(M_Opis_progiv_v.BoldObject);
end;

procedure TList_klienta._SetOpis_progiv_v(const value: TNomer_arendy);
begin
  M_Opis_progiv_v.BoldObject := value;
end;

function TList_klienta._GetOpis_prog_klienta: TKlientList;
begin
  assert(ValidateMember('TList_klienta', 'Opis_prog_klienta', 61, TKlientList));
  Result := TKlientList(BoldMembers[61]);
end;

function TList_klienta._GetProgivanie: TProgivanieList;
begin
  assert(ValidateMember('TList_klienta', 'Progivanie', 62, TProgivanieList));
  Result := TProgivanieList(BoldMembers[62]);
end;

function TList_klienta._Getimeet_oplatu: TPrihodnyi_orderList;
begin
  assert(ValidateMember('TList_klienta', 'imeet_oplatu', 63, TPrihodnyi_orderList));
  Result := TPrihodnyi_orderList(BoldMembers[63]);
end;

function TList_klienta._Get_M_oplachivaetsya: TBoldObjectReference;
begin
  assert(ValidateMember('TList_klienta', 'oplachivaetsya', 64, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[64]);
end;

function TList_klienta._Getoplachivaetsya: TKlient;
begin
  assert(not assigned(M_oplachivaetsya.BoldObject) or (M_oplachivaetsya.BoldObject is TKlient), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'oplachivaetsya', M_oplachivaetsya.BoldObject.ClassName, 'TKlient']));
  Result := TKlient(M_oplachivaetsya.BoldObject);
end;

procedure TList_klienta._Setoplachivaetsya(const value: TKlient);
begin
  M_oplachivaetsya.BoldObject := value;
end;

function TList_klienta._Get_M_zavedyon_administ: TBoldObjectReference;
begin
  assert(ValidateMember('TList_klienta', 'zavedyon_administ', 65, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[65]);
end;

function TList_klienta._Getzavedyon_administ: TPersonal;
begin
  assert(not assigned(M_zavedyon_administ.BoldObject) or (M_zavedyon_administ.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'zavedyon_administ', M_zavedyon_administ.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_zavedyon_administ.BoldObject);
end;

procedure TList_klienta._Setzavedyon_administ(const value: TPersonal);
begin
  M_zavedyon_administ.BoldObject := value;
end;

function TList_klienta._Getimeet_pereocenki: TPereocenkaList;
begin
  assert(ValidateMember('TList_klienta', 'imeet_pereocenki', 66, TPereocenkaList));
  Result := TPereocenkaList(BoldMembers[66]);
end;

procedure TList_klientaList.Add(NewObject: TList_klienta);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TList_klientaList.IndexOf(anObject: TList_klienta): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TList_klientaList.Includes(anObject: TList_klienta) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TList_klientaList.AddNew: TList_klienta;
begin
  result := TList_klienta(InternalAddNew);
end;

procedure TList_klientaList.Insert(index: Integer; NewObject: TList_klienta);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TList_klientaList.GetBoldObject(index: Integer): TList_klienta;
begin
  result := TList_klienta(GetElement(index));
end;

procedure TList_klientaList.SetBoldObject(index: Integer; NewObject: TList_klienta);
begin;
  SetElement(index, NewObject);
end;

function TList_klienta.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  if (Member = M_Informaciya_o_klientah) then result := _Informaciya_o_klientah_DeriveAndSubscribe else
  result := inherited GetDeriveMethodForMember(Member);
end;

function TList_klienta.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

function GeneratedCodeCRC: String;
begin
  result := '1238776522';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Ispoljz_obychn_skidkinapryamuyu_ocenivaet', Tispoljz_obychn_skidkinapryamuyu_ocenivaetList);
  BoldObjectListClasses.AddObjectEntry('LinkPredost_diskont_vPredost_diskont', TLinkPredost_diskont_vPredost_diskontList);
  BoldObjectListClasses.AddObjectEntry('Otd_chel_imeet_skidkiSkidka_kak_prog_otd_chel', TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chelList);
  BoldObjectListClasses.AddObjectEntry('Bronj', TBronjList);
  BoldObjectListClasses.AddObjectEntry('Log_operacii', TLog_operaciiList);
  BoldObjectListClasses.AddObjectEntry('Nastroiki', TNastroikiList);
  BoldObjectListClasses.AddObjectEntry('Nomer_arendy', TNomer_arendyList);
  BoldObjectListClasses.AddObjectEntry('Ogidanie', TOgidanieList);
  BoldObjectListClasses.AddObjectEntry('Pereocenka', TPereocenkaList);
  BoldObjectListClasses.AddObjectEntry('Persona', TPersonaList);
  BoldObjectListClasses.AddObjectEntry('Prihodn_dokument', TPrihodn_dokumentList);
  BoldObjectListClasses.AddObjectEntry('Progivanie', TProgivanieList);
  BoldObjectListClasses.AddObjectEntry('Spravochnik', TSpravochnikList);
  BoldObjectListClasses.AddObjectEntry('Organizaciya', TOrganizaciyaList);
  BoldObjectListClasses.AddObjectEntry('Prihodnyi_order', TPrihodnyi_orderList);
  BoldObjectListClasses.AddObjectEntry('Discont_politika', TDiscont_politikaList);
  BoldObjectListClasses.AddObjectEntry('Dolgnostj', TDolgnostjList);
  BoldObjectListClasses.AddObjectEntry('Klass_nomera', TKlass_nomeraList);
  BoldObjectListClasses.AddObjectEntry('Korpus', TKorpusList);
  BoldObjectListClasses.AddObjectEntry('Opciiya_urovnya', TOpciiya_urovnyaList);
  BoldObjectListClasses.AddObjectEntry('Otelj', TOteljList);
  BoldObjectListClasses.AddObjectEntry('Rash_dokument', TRash_dokumentList);
  BoldObjectListClasses.AddObjectEntry('Skidki', TSkidkiList);
  BoldObjectListClasses.AddObjectEntry('Cenovaya_politika', TCenovaya_politikaList);
  BoldObjectListClasses.AddObjectEntry('Klient', TKlientList);
  BoldObjectListClasses.AddObjectEntry('Personal', TPersonalList);
  BoldObjectListClasses.AddObjectEntry('List_klienta', TList_klientaList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('Ispoljz_obychn_skidkinapryamuyu_ocenivaet', Tispoljz_obychn_skidkinapryamuyu_ocenivaet);
  BoldObjectClasses.AddObjectEntry('LinkPredost_diskont_vPredost_diskont', TLinkPredost_diskont_vPredost_diskont);
  BoldObjectClasses.AddObjectEntry('Otd_chel_imeet_skidkiSkidka_kak_prog_otd_chel', TOtd_chel_imeet_skidkiSkidka_kak_prog_otd_chel);
  BoldObjectClasses.AddObjectEntry('Bronj', TBronj);
  BoldObjectClasses.AddObjectEntry('Log_operacii', TLog_operacii);
  BoldObjectClasses.AddObjectEntry('Nastroiki', TNastroiki);
  BoldObjectClasses.AddObjectEntry('Nomer_arendy', TNomer_arendy);
  BoldObjectClasses.AddObjectEntry('Ogidanie', TOgidanie);
  BoldObjectClasses.AddObjectEntry('Pereocenka', TPereocenka);
  BoldObjectClasses.AddObjectEntry('Persona', TPersona);
  BoldObjectClasses.AddObjectEntry('Prihodn_dokument', TPrihodn_dokument);
  BoldObjectClasses.AddObjectEntry('Progivanie', TProgivanie);
  BoldObjectClasses.AddObjectEntry('Spravochnik', TSpravochnik);
  BoldObjectClasses.AddObjectEntry('Organizaciya', TOrganizaciya);
  BoldObjectClasses.AddObjectEntry('Prihodnyi_order', TPrihodnyi_order);
  BoldObjectClasses.AddObjectEntry('Discont_politika', TDiscont_politika);
  BoldObjectClasses.AddObjectEntry('Dolgnostj', TDolgnostj);
  BoldObjectClasses.AddObjectEntry('Klass_nomera', TKlass_nomera);
  BoldObjectClasses.AddObjectEntry('Korpus', TKorpus);
  BoldObjectClasses.AddObjectEntry('Opciiya_urovnya', TOpciiya_urovnya);
  BoldObjectClasses.AddObjectEntry('Otelj', TOtelj);
  BoldObjectClasses.AddObjectEntry('Rash_dokument', TRash_dokument);
  BoldObjectClasses.AddObjectEntry('Skidki', TSkidki);
  BoldObjectClasses.AddObjectEntry('Cenovaya_politika', TCenovaya_politika);
  BoldObjectClasses.AddObjectEntry('Klient', TKlient);
  BoldObjectClasses.AddObjectEntry('Personal', TPersonal);
  BoldObjectClasses.AddObjectEntry('List_klienta', TList_klienta);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('BusinessClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

