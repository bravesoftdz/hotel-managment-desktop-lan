(*****************************************************)
(*                                                   *)
(*  Bold for Delphi Stub File                        *)
(*                                                   *)
(*  Autogenerated file for method implementations    *)
(*                                                   *)
(*****************************************************)

//

procedure TNomer_arendy._Perekryvaet_bronj_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
//var
//  Result: Boolean;
begin
  // Calculate value into Result and place the required subscriptions
  // Result := <<formula>>
  // M_Perekryvaet_bronj.AsBoolean := Result;
end;

procedure TOrganizaciya._Propiska_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
begin
  inherited;
end;

procedure TPrihodnyi_order._Vsego_dohod_s_arendy_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
begin
  inherited;
end;

procedure TKlient._Propiska_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
begin
  inherited;
end;

procedure TKlient._Inf_o_kliente_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
//var
//  Result: String;
begin
  // Calculate value into Result and place the required subscriptions
  // Result := <<formula>>
  // M_Inf_o_kliente.AsString := Result;
end;

procedure TKlient._Chislo_progivanii_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
//var
//  Result: Integer;
begin
  // Calculate value into Result and place the required subscriptions
  // Result := <<formula>>
  // M_Chislo_progivanii.AsInteger := Result;
end;

procedure TPersonal._Propiska_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
begin
  inherited;
end;

procedure TList_klienta._Informaciya_o_klientah_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
//var
//  Result: String;
begin
  // Calculate value into Result and place the required subscriptions
  // Result := <<formula>>
  // M_Informaciya_o_klientah.AsString := Result;
end;

procedure TList_klienta._Doplata_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
//var
//  Result: double;
begin
  // Calculate value into Result and place the required subscriptions
  // Result := <<formula>>
  // M_Doplata.AsFloat := Result;
end;

procedure TList_klienta._Chislo_progivanii_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
//var
//  Result: Integer;
begin
  // Calculate value into Result and place the required subscriptions
  // Result := <<formula>>
  // M_Chislo_progivanii.AsInteger := Result;
end;



procedure TList_klienta._Chislo_vmeste_givushih_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
//var
//  Result: Integer;
begin
  // Calculate value into Result and place the required subscriptions
  // Result := <<formula>>
  // M_Chislo_vmeste_givushih.AsInteger := Result;
end;

procedure TPersona._Propiska_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
//var
//  Result: String;
begin
  // Calculate value into Result and place the required subscriptions
  // Result := <<formula>>
  // M_Propiska.AsString := Result;
end;

procedure TPrihodn_dokument._Vsego_dohod_s_arendy_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
//var
//  Result: double;
begin
  // Calculate value into Result and place the required subscriptions
  // Result := <<formula>>
  // M_Vsego_dohod_s_arendy.AsFloat := Result;
end;

procedure TList_klienta._Chislo_otdeljno_giv_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
//var
//  Result: Integer;
begin
  // Calculate value into Result and place the required subscriptions
  // Result := <<formula>>
  // M_Chislo_otdeljno_giv.AsInteger := Result;
end;


procedure TOpciiya_urovnya._addprice_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber);
//var
//  Result: double;
begin
  // Calculate value into Result and place the required subscriptions
  // Result := <<formula>>
  // M_addprice.AsFloat := Result;
end;

